ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_INITIALIZED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFA
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a t
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_INITIALIZED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of e
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask );
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseTaskLists( void );
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static void prvDeleteTCB( TCB_t *pxTCB );
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvCheckTasksWaitingTermination( void );
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const Base
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArr
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcN
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte );
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static TickType_t prvGetExpectedIdleTime( void );
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_FUNCTION static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ); /*lint !e971 Unqualified char types are allowed f
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_FUNCTION static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB );
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1665 0
  34 0000 50B1     		cbz	r0, .L8
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1668 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0D4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 11D1     		bne	.L5
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1671 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 31


  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0C4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0FD0     		beq	.L6
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  45              		.loc 1 1675 0
  46 0012 83B1     		cbz	r3, .L7
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1658 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB90:
  54              	.LBB91:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     ***************************************************************************
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 32


  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 33


  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 34


 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 35


 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
  56              		.loc 2 237 0
  57              		.syntax unified
  58              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 72B6     		cpsid i													
  61 001e 83F31188 		msr basepri, r3											
  62 0022 BFF36F8F 		isb														
  63 0026 BFF34F8F 		dsb														
  64 002a 62B6     		cpsie i													
  65              	
  66              	@ 0 "" 2
  67              	.LVL3:
  68              		.thumb
  69              		.syntax unified
  70              	.L3:
  71 002c FEE7     		b	.L3
  72              	.L5:
  73              	.LBE91:
  74              	.LBE90:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  75              		.loc 1 1658 0
  76 002e 0020     		movs	r0, #0
  77              	.LVL4:
  78 0030 7047     		bx	lr
  79              	.LVL5:
  80              	.L6:
  81 0032 0020     		movs	r0, #0
  82              	.LVL6:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 36


  83 0034 7047     		bx	lr
  84              	.LVL7:
  85              	.L7:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  86              		.loc 1 1677 0
  87 0036 0120     		movs	r0, #1
  88              	.LVL8:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  89              		.loc 1 1695 0
  90 0038 7047     		bx	lr
  91              	.L10:
  92 003a 00BF     		.align	2
  93              	.L9:
  94 003c 00000000 		.word	.LANCHOR0
  95 0040 00000000 		.word	.LANCHOR1
  96              		.cfi_endproc
  97              	.LFE14:
  99              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv5-sp-d16
 106              	prvResetNextTaskUnblockTime:
 107              	.LFB38:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 37


1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 38


1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 39


1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 40


1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 41


1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 42


1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 43


2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 44


2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 45


2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 46


2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 47


2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 48


2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 49


2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 50


2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 51


2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 52


2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 53


2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 54


2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 55


2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 56


2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 57


2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 58


2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 59


2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 60


3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 61


3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 62


3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 63


3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 64


3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 65


3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 66


3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 67


3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 68


3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 69


3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 70


3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 108              		.loc 1 3636 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 113              		.loc 1 3639 0
 114 0000 084B     		ldr	r3, .L15
 115 0002 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 71


 116 0004 1B68     		ldr	r3, [r3]
 117 0006 3BB1     		cbz	r3, .L14
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 118              		.loc 1 3653 0
 119 0008 064B     		ldr	r3, .L15
 120 000a 1B68     		ldr	r3, [r3]
 121 000c DB68     		ldr	r3, [r3, #12]
 122 000e DB68     		ldr	r3, [r3, #12]
 123              	.LVL9:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 124              		.loc 1 3654 0
 125 0010 5A68     		ldr	r2, [r3, #4]
 126 0012 054B     		ldr	r3, .L15+4
 127              	.LVL10:
 128 0014 1A60     		str	r2, [r3]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 129              		.loc 1 3656 0
 130 0016 7047     		bx	lr
 131              	.L14:
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 132              		.loc 1 3645 0
 133 0018 034B     		ldr	r3, .L15+4
 134 001a 4FF0FF32 		mov	r2, #-1
 135 001e 1A60     		str	r2, [r3]
 136 0020 7047     		bx	lr
 137              	.L16:
 138 0022 00BF     		.align	2
 139              	.L15:
 140 0024 00000000 		.word	.LANCHOR2
 141 0028 00000000 		.word	.LANCHOR3
 142              		.cfi_endproc
 143              	.LFE38:
 145              		.section	.text.prvDeleteTCB,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-sp-d16
 152              	prvDeleteTCB:
 153              	.LFB37:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 154              		.loc 1 3582 0
 155              		.cfi_startproc
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 72


 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL11:
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 164 0002 0446     		mov	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 165              		.loc 1 3600 0
 166 0004 006B     		ldr	r0, [r0, #48]
 167              	.LVL12:
 168 0006 FFF7FEFF 		bl	vPortFree
 169              	.LVL13:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 170              		.loc 1 3601 0
 171 000a 2046     		mov	r0, r4
 172 000c FFF7FEFF 		bl	vPortFree
 173              	.LVL14:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174              		.loc 1 3630 0
 175 0010 10BD     		pop	{r4, pc}
 176              		.cfi_endproc
 177              	.LFE37:
 179              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv5-sp-d16
 186              	prvInitialiseNewTask:
 187              	.LFB6:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 188              		.loc 1 775 0
 189              		.cfi_startproc
 190              		@ args = 16, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL15:
 193 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 194              	.LCFI1:
 195              		.cfi_def_cfa_offset 32
 196              		.cfi_offset 4, -32
 197              		.cfi_offset 5, -28
 198              		.cfi_offset 6, -24
 199              		.cfi_offset 7, -20
 200              		.cfi_offset 8, -16
 201              		.cfi_offset 9, -12
 202              		.cfi_offset 10, -8
 203              		.cfi_offset 14, -4
 204 0004 8046     		mov	r8, r0
 205 0006 9946     		mov	r9, r3
 206 0008 089D     		ldr	r5, [sp, #32]
 207 000a 099F     		ldr	r7, [sp, #36]
 208 000c 0A9C     		ldr	r4, [sp, #40]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 209              		.loc 1 807 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 73


 210 000e 266B     		ldr	r6, [r4, #48]
 211 0010 6FF04043 		mvn	r3, #-1073741824
 212              	.LVL16:
 213 0014 1344     		add	r3, r3, r2
 214 0016 06EB8306 		add	r6, r6, r3, lsl #2
 215              	.LVL17:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 216              		.loc 1 808 0
 217 001a 26F00706 		bic	r6, r6, #7
 218              	.LVL18:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 219              		.loc 1 827 0
 220 001e 0023     		movs	r3, #0
 221              	.LVL19:
 222              	.L20:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 223              		.loc 1 827 0 is_stmt 0 discriminator 1
 224 0020 0F2B     		cmp	r3, #15
 225 0022 07D8     		bhi	.L21
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 226              		.loc 1 829 0 is_stmt 1
 227 0024 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 228 0026 E218     		adds	r2, r4, r3
 229 0028 82F83400 		strb	r0, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 230              		.loc 1 834 0
 231 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 232 002e 0AB1     		cbz	r2, .L21
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 233              		.loc 1 827 0 discriminator 2
 234 0030 0133     		adds	r3, r3, #1
 235              	.LVL20:
 236 0032 F5E7     		b	.L20
 237              	.L21:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 238              		.loc 1 846 0
 239 0034 0023     		movs	r3, #0
 240              	.LVL21:
 241 0036 84F84330 		strb	r3, [r4, #67]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 242              		.loc 1 850 0
 243 003a 062D     		cmp	r5, #6
 244 003c 00D9     		bls	.L23
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 245              		.loc 1 852 0
 246 003e 0625     		movs	r5, #6
 247              	.L23:
 248              	.LVL22:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 249              		.loc 1 859 0
 250 0040 E562     		str	r5, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 251              		.loc 1 862 0
 252 0042 6564     		str	r5, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 253              		.loc 1 863 0
 254 0044 4FF0000A 		mov	r10, #0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 74


 255 0048 C4F848A0 		str	r10, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 256              		.loc 1 867 0
 257 004c 201D     		adds	r0, r4, #4
 258 004e FFF7FEFF 		bl	vListInitialiseItem
 259              	.LVL23:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260              		.loc 1 868 0
 261 0052 04F11800 		add	r0, r4, #24
 262 0056 FFF7FEFF 		bl	vListInitialiseItem
 263              	.LVL24:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264              		.loc 1 872 0
 265 005a 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 266              		.loc 1 875 0
 267 005c C5F10705 		rsb	r5, r5, #7
 268              	.LVL25:
 269 0060 A561     		str	r5, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270              		.loc 1 876 0
 271 0062 6462     		str	r4, [r4, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 272              		.loc 1 918 0
 273 0064 C4F84CA0 		str	r10, [r4, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 274              		.loc 1 919 0
 275 0068 84F850A0 		strb	r10, [r4, #80]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 276              		.loc 1 946 0
 277 006c 4A46     		mov	r2, r9
 278 006e 4146     		mov	r1, r8
 279 0070 3046     		mov	r0, r6
 280 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 281              	.LVL26:
 282 0076 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 283              		.loc 1 950 0
 284 0078 07B1     		cbz	r7, .L19
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 285              		.loc 1 954 0
 286 007a 3C60     		str	r4, [r7]
 287              	.L19:
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 288              		.loc 1 960 0
 289 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 290              		.cfi_endproc
 291              	.LFE6:
 293              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 294              		.align	1
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu fpv5-sp-d16
 300              	prvInitialiseTaskLists:
 301              	.LFB35:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 75


 302              		.loc 1 3334 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306 0000 38B5     		push	{r3, r4, r5, lr}
 307              	.LCFI2:
 308              		.cfi_def_cfa_offset 16
 309              		.cfi_offset 3, -16
 310              		.cfi_offset 4, -12
 311              		.cfi_offset 5, -8
 312              		.cfi_offset 14, -4
 313              	.LVL27:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 314              		.loc 1 3337 0
 315 0002 0024     		movs	r4, #0
 316 0004 07E0     		b	.L28
 317              	.LVL28:
 318              	.L29:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 319              		.loc 1 3339 0 discriminator 3
 320 0006 04EB8402 		add	r2, r4, r4, lsl #2
 321 000a 9300     		lsls	r3, r2, #2
 322 000c 0E48     		ldr	r0, .L31
 323 000e 1844     		add	r0, r0, r3
 324 0010 FFF7FEFF 		bl	vListInitialise
 325              	.LVL29:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 326              		.loc 1 3337 0 discriminator 3
 327 0014 0134     		adds	r4, r4, #1
 328              	.LVL30:
 329              	.L28:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 330              		.loc 1 3337 0 is_stmt 0 discriminator 1
 331 0016 062C     		cmp	r4, #6
 332 0018 F5D9     		bls	.L29
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 333              		.loc 1 3342 0 is_stmt 1
 334 001a 0C4D     		ldr	r5, .L31+4
 335 001c 2846     		mov	r0, r5
 336 001e FFF7FEFF 		bl	vListInitialise
 337              	.LVL31:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 338              		.loc 1 3343 0
 339 0022 0B4C     		ldr	r4, .L31+8
 340              	.LVL32:
 341 0024 2046     		mov	r0, r4
 342 0026 FFF7FEFF 		bl	vListInitialise
 343              	.LVL33:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 344              		.loc 1 3344 0
 345 002a 0A48     		ldr	r0, .L31+12
 346 002c FFF7FEFF 		bl	vListInitialise
 347              	.LVL34:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 348              		.loc 1 3348 0
 349 0030 0948     		ldr	r0, .L31+16
 350 0032 FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 76


 351              	.LVL35:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 352              		.loc 1 3354 0
 353 0036 0948     		ldr	r0, .L31+20
 354 0038 FFF7FEFF 		bl	vListInitialise
 355              	.LVL36:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 356              		.loc 1 3360 0
 357 003c 084B     		ldr	r3, .L31+24
 358 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 359              		.loc 1 3361 0
 360 0040 084B     		ldr	r3, .L31+28
 361 0042 1C60     		str	r4, [r3]
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 362              		.loc 1 3362 0
 363 0044 38BD     		pop	{r3, r4, r5, pc}
 364              	.L32:
 365 0046 00BF     		.align	2
 366              	.L31:
 367 0048 00000000 		.word	.LANCHOR4
 368 004c 00000000 		.word	.LANCHOR5
 369 0050 00000000 		.word	.LANCHOR6
 370 0054 00000000 		.word	.LANCHOR1
 371 0058 00000000 		.word	.LANCHOR7
 372 005c 00000000 		.word	.LANCHOR0
 373 0060 00000000 		.word	.LANCHOR2
 374 0064 00000000 		.word	.LANCHOR8
 375              		.cfi_endproc
 376              	.LFE35:
 378              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 379              		.align	1
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv5-sp-d16
 385              	prvAddNewTaskToReadyList:
 386              	.LFB7:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 387              		.loc 1 964 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              	.LVL37:
 392 0000 10B5     		push	{r4, lr}
 393              	.LCFI3:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 4, -8
 396              		.cfi_offset 14, -4
 397 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 398              		.loc 1 967 0
 399 0004 FFF7FEFF 		bl	vPortEnterCritical
 400              	.LVL38:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 401              		.loc 1 969 0
 402 0008 1A4A     		ldr	r2, .L40
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 77


 403 000a 1368     		ldr	r3, [r2]
 404 000c 0133     		adds	r3, r3, #1
 405 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 406              		.loc 1 970 0
 407 0010 194B     		ldr	r3, .L40+4
 408 0012 1B68     		ldr	r3, [r3]
 409 0014 5BB1     		cbz	r3, .L38
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 410              		.loc 1 993 0
 411 0016 194B     		ldr	r3, .L40+8
 412 0018 1B68     		ldr	r3, [r3]
 413 001a 6BB9     		cbnz	r3, .L35
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 414              		.loc 1 995 0
 415 001c 164B     		ldr	r3, .L40+4
 416 001e 1B68     		ldr	r3, [r3]
 417 0020 DA6A     		ldr	r2, [r3, #44]
 418 0022 E36A     		ldr	r3, [r4, #44]
 419 0024 9A42     		cmp	r2, r3
 420 0026 07D8     		bhi	.L35
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 421              		.loc 1 997 0
 422 0028 134B     		ldr	r3, .L40+4
 423 002a 1C60     		str	r4, [r3]
 424 002c 04E0     		b	.L35
 425              	.L38:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426              		.loc 1 974 0
 427 002e 124B     		ldr	r3, .L40+4
 428 0030 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 429              		.loc 1 976 0
 430 0032 1368     		ldr	r3, [r2]
 431 0034 012B     		cmp	r3, #1
 432 0036 1AD0     		beq	.L39
 433              	.L35:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434              		.loc 1 1010 0
 435 0038 114A     		ldr	r2, .L40+12
 436 003a 1368     		ldr	r3, [r2]
 437 003c 0133     		adds	r3, r3, #1
 438 003e 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439              		.loc 1 1020 0
 440 0040 E36A     		ldr	r3, [r4, #44]
 441 0042 0122     		movs	r2, #1
 442 0044 9A40     		lsls	r2, r2, r3
 443 0046 0F49     		ldr	r1, .L40+16
 444 0048 0868     		ldr	r0, [r1]
 445 004a 0243     		orrs	r2, r2, r0
 446 004c 0A60     		str	r2, [r1]
 447 004e 03EB8303 		add	r3, r3, r3, lsl #2
 448 0052 9A00     		lsls	r2, r3, #2
 449 0054 211D     		adds	r1, r4, #4
 450 0056 0C48     		ldr	r0, .L40+20
 451 0058 1044     		add	r0, r0, r2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 78


 452 005a FFF7FEFF 		bl	vListInsertEnd
 453              	.LVL39:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 454              		.loc 1 1024 0
 455 005e FFF7FEFF 		bl	vPortExitCritical
 456              	.LVL40:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 457              		.loc 1 1026 0
 458 0062 064B     		ldr	r3, .L40+8
 459 0064 1B68     		ldr	r3, [r3]
 460 0066 0BB1     		cbz	r3, .L33
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 461              		.loc 1 1030 0
 462 0068 034B     		ldr	r3, .L40+4
 463 006a 1B68     		ldr	r3, [r3]
 464              	.L33:
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 465              		.loc 1 1043 0
 466 006c 10BD     		pop	{r4, pc}
 467              	.LVL41:
 468              	.L39:
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 469              		.loc 1 981 0
 470 006e FFF7FEFF 		bl	prvInitialiseTaskLists
 471              	.LVL42:
 472 0072 E1E7     		b	.L35
 473              	.L41:
 474              		.align	2
 475              	.L40:
 476 0074 00000000 		.word	.LANCHOR9
 477 0078 00000000 		.word	.LANCHOR10
 478 007c 00000000 		.word	.LANCHOR11
 479 0080 00000000 		.word	.LANCHOR12
 480 0084 00000000 		.word	.LANCHOR13
 481 0088 00000000 		.word	.LANCHOR4
 482              		.cfi_endproc
 483              	.LFE7:
 485              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 486              		.align	1
 487              		.syntax unified
 488              		.thumb
 489              		.thumb_func
 490              		.fpu fpv5-sp-d16
 492              	prvAddCurrentTaskToDelayedList:
 493              	.LFB51:
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 79


3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 80


3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 81


3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 82


3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 83


3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 84


3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 85


4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 86


4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 87


4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 88


4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 89


4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 90


4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 91


4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 92


4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 93


4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 94


4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 95


4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 96


4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 494              		.loc 1 4693 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 97


 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498              	.LVL43:
 499 0000 70B5     		push	{r4, r5, r6, lr}
 500              	.LCFI4:
 501              		.cfi_def_cfa_offset 16
 502              		.cfi_offset 4, -16
 503              		.cfi_offset 5, -12
 504              		.cfi_offset 6, -8
 505              		.cfi_offset 14, -4
 506 0002 0446     		mov	r4, r0
 507 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 508              		.loc 1 4695 0
 509 0006 1F4B     		ldr	r3, .L50
 510 0008 1D68     		ldr	r5, [r3]
 511              	.LVL44:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 512              		.loc 1 4708 0
 513 000a 1F4B     		ldr	r3, .L50+4
 514 000c 1868     		ldr	r0, [r3]
 515              	.LVL45:
 516 000e 0430     		adds	r0, r0, #4
 517 0010 FFF7FEFF 		bl	uxListRemove
 518              	.LVL46:
 519 0014 50B9     		cbnz	r0, .L43
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 520              		.loc 1 4712 0
 521 0016 1C4B     		ldr	r3, .L50+4
 522 0018 1B68     		ldr	r3, [r3]
 523 001a DA6A     		ldr	r2, [r3, #44]
 524 001c 0123     		movs	r3, #1
 525 001e 03FA02F2 		lsl	r2, r3, r2
 526 0022 1A49     		ldr	r1, .L50+8
 527 0024 0B68     		ldr	r3, [r1]
 528 0026 23EA0203 		bic	r3, r3, r2
 529 002a 0B60     		str	r3, [r1]
 530              	.L43:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 98


4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 531              		.loc 1 4721 0
 532 002c B4F1FF3F 		cmp	r4, #-1
 533 0030 14BF     		ite	ne
 534 0032 0023     		movne	r3, #0
 535 0034 0123     		moveq	r3, #1
 536 0036 002E     		cmp	r6, #0
 537 0038 08BF     		it	eq
 538 003a 0023     		moveq	r3, #0
 539 003c 9BB9     		cbnz	r3, .L48
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 540              		.loc 1 4733 0
 541 003e 2C44     		add	r4, r4, r5
 542              	.LVL47:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 543              		.loc 1 4736 0
 544 0040 114B     		ldr	r3, .L50+4
 545 0042 1B68     		ldr	r3, [r3]
 546 0044 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 547              		.loc 1 4738 0
 548 0046 A542     		cmp	r5, r4
 549 0048 14D8     		bhi	.L49
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 550              		.loc 1 4748 0
 551 004a 114B     		ldr	r3, .L50+12
 552 004c 1868     		ldr	r0, [r3]
 553 004e 0E4B     		ldr	r3, .L50+4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 99


 554 0050 1968     		ldr	r1, [r3]
 555 0052 0431     		adds	r1, r1, #4
 556 0054 FFF7FEFF 		bl	vListInsert
 557              	.LVL48:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 558              		.loc 1 4753 0
 559 0058 0E4B     		ldr	r3, .L50+16
 560 005a 1B68     		ldr	r3, [r3]
 561 005c A342     		cmp	r3, r4
 562 005e 10D9     		bls	.L42
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 563              		.loc 1 4755 0
 564 0060 0C4B     		ldr	r3, .L50+16
 565 0062 1C60     		str	r4, [r3]
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 100


4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 566              		.loc 1 4801 0
 567 0064 0DE0     		b	.L42
 568              	.LVL49:
 569              	.L48:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 570              		.loc 1 4726 0
 571 0066 084B     		ldr	r3, .L50+4
 572 0068 1968     		ldr	r1, [r3]
 573 006a 0431     		adds	r1, r1, #4
 574 006c 0A48     		ldr	r0, .L50+20
 575 006e FFF7FEFF 		bl	vListInsertEnd
 576              	.LVL50:
 577 0072 06E0     		b	.L42
 578              	.LVL51:
 579              	.L49:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 580              		.loc 1 4742 0
 581 0074 094B     		ldr	r3, .L50+24
 582 0076 1868     		ldr	r0, [r3]
 583 0078 034B     		ldr	r3, .L50+4
 584 007a 1968     		ldr	r1, [r3]
 585 007c 0431     		adds	r1, r1, #4
 586 007e FFF7FEFF 		bl	vListInsert
 587              	.LVL52:
 588              	.L42:
 589              		.loc 1 4801 0
 590 0082 70BD     		pop	{r4, r5, r6, pc}
 591              	.LVL53:
 592              	.L51:
 593              		.align	2
 594              	.L50:
 595 0084 00000000 		.word	.LANCHOR14
 596 0088 00000000 		.word	.LANCHOR10
 597 008c 00000000 		.word	.LANCHOR13
 598 0090 00000000 		.word	.LANCHOR2
 599 0094 00000000 		.word	.LANCHOR3
 600 0098 00000000 		.word	.LANCHOR0
 601 009c 00000000 		.word	.LANCHOR8
 602              		.cfi_endproc
 603              	.LFE51:
 605              		.section	.text.xTaskCreate,"ax",%progbits
 606              		.align	1
 607              		.global	xTaskCreate
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu fpv5-sp-d16
 613              	xTaskCreate:
 614              	.LFB5:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 101


 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 615              		.loc 1 682 0
 616              		.cfi_startproc
 617              		@ args = 8, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              	.LVL54:
 620 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 621              	.LCFI5:
 622              		.cfi_def_cfa_offset 28
 623              		.cfi_offset 4, -28
 624              		.cfi_offset 5, -24
 625              		.cfi_offset 6, -20
 626              		.cfi_offset 7, -16
 627              		.cfi_offset 8, -12
 628              		.cfi_offset 9, -8
 629              		.cfi_offset 14, -4
 630 0004 85B0     		sub	sp, sp, #20
 631              	.LCFI6:
 632              		.cfi_def_cfa_offset 48
 633 0006 0746     		mov	r7, r0
 634 0008 8846     		mov	r8, r1
 635 000a 1546     		mov	r5, r2
 636 000c 9946     		mov	r9, r3
 637              	.LBB92:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638              		.loc 1 716 0
 639 000e 9000     		lsls	r0, r2, #2
 640              	.LVL55:
 641 0010 FFF7FEFF 		bl	pvPortMalloc
 642              	.LVL56:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 643              		.loc 1 718 0
 644 0014 F8B1     		cbz	r0, .L56
 645 0016 0646     		mov	r6, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646              		.loc 1 721 0
 647 0018 5420     		movs	r0, #84
 648              	.LVL57:
 649 001a FFF7FEFF 		bl	pvPortMalloc
 650              	.LVL58:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 651              		.loc 1 723 0
 652 001e 0446     		mov	r4, r0
 653 0020 A8B1     		cbz	r0, .L54
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 654              		.loc 1 726 0
 655 0022 0663     		str	r6, [r0, #48]
 656              	.LVL59:
 657              	.L55:
 658              	.LBE92:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 659              		.loc 1 742 0
 660 0024 D4B1     		cbz	r4, .L57
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 661              		.loc 1 752 0
 662 0026 0023     		movs	r3, #0
 663 0028 0393     		str	r3, [sp, #12]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 102


 664 002a 0294     		str	r4, [sp, #8]
 665 002c 0D9B     		ldr	r3, [sp, #52]
 666 002e 0193     		str	r3, [sp, #4]
 667 0030 0C9B     		ldr	r3, [sp, #48]
 668 0032 0093     		str	r3, [sp]
 669 0034 4B46     		mov	r3, r9
 670 0036 2A46     		mov	r2, r5
 671 0038 4146     		mov	r1, r8
 672 003a 3846     		mov	r0, r7
 673 003c FFF7FEFF 		bl	prvInitialiseNewTask
 674              	.LVL60:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 675              		.loc 1 753 0
 676 0040 2046     		mov	r0, r4
 677 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 678              	.LVL61:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 679              		.loc 1 754 0
 680 0046 0120     		movs	r0, #1
 681              	.LVL62:
 682              	.L52:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 683              		.loc 1 762 0
 684 0048 05B0     		add	sp, sp, #20
 685              	.LCFI7:
 686              		.cfi_remember_state
 687              		.cfi_def_cfa_offset 28
 688              		@ sp needed
 689 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 690              	.LVL63:
 691              	.L54:
 692              	.LCFI8:
 693              		.cfi_restore_state
 694              	.LBB93:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 695              		.loc 1 732 0
 696 004e 3046     		mov	r0, r6
 697              	.LVL64:
 698 0050 FFF7FEFF 		bl	vPortFree
 699              	.LVL65:
 700 0054 E6E7     		b	.L55
 701              	.LVL66:
 702              	.L56:
 703              	.LBE93:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 704              		.loc 1 758 0
 705 0056 4FF0FF30 		mov	r0, #-1
 706              	.LVL67:
 707 005a F5E7     		b	.L52
 708              	.LVL68:
 709              	.L57:
 710 005c 4FF0FF30 		mov	r0, #-1
 711              	.LVL69:
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 712              		.loc 1 761 0
 713 0060 F2E7     		b	.L52
 714              		.cfi_endproc
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 103


 715              	.LFE5:
 717              		.section	.text.vTaskDelete,"ax",%progbits
 718              		.align	1
 719              		.global	vTaskDelete
 720              		.syntax unified
 721              		.thumb
 722              		.thumb_func
 723              		.fpu fpv5-sp-d16
 725              	vTaskDelete:
 726              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 727              		.loc 1 1049 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              	.LVL70:
 732 0000 38B5     		push	{r3, r4, r5, lr}
 733              	.LCFI9:
 734              		.cfi_def_cfa_offset 16
 735              		.cfi_offset 3, -16
 736              		.cfi_offset 4, -12
 737              		.cfi_offset 5, -8
 738              		.cfi_offset 14, -4
 739 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 740              		.loc 1 1052 0
 741 0004 FFF7FEFF 		bl	vPortEnterCritical
 742              	.LVL71:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743              		.loc 1 1056 0
 744 0008 002C     		cmp	r4, #0
 745 000a 34D0     		beq	.L69
 746              	.LVL72:
 747              	.L60:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748              		.loc 1 1059 0 discriminator 4
 749 000c 251D     		adds	r5, r4, #4
 750 000e 2846     		mov	r0, r5
 751 0010 FFF7FEFF 		bl	uxListRemove
 752              	.LVL73:
 753 0014 70B9     		cbnz	r0, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 754              		.loc 1 1061 0
 755 0016 E26A     		ldr	r2, [r4, #44]
 756 0018 02EB8201 		add	r1, r2, r2, lsl #2
 757 001c 8B00     		lsls	r3, r1, #2
 758 001e 2749     		ldr	r1, .L72
 759 0020 CB58     		ldr	r3, [r1, r3]
 760 0022 3BB9     		cbnz	r3, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 761              		.loc 1 1061 0 is_stmt 0 discriminator 1
 762 0024 0123     		movs	r3, #1
 763 0026 03FA02F2 		lsl	r2, r3, r2
 764 002a 2549     		ldr	r1, .L72+4
 765 002c 0B68     		ldr	r3, [r1]
 766 002e 23EA0203 		bic	r3, r3, r2
 767 0032 0B60     		str	r3, [r1]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 104


 768              	.L61:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 769              		.loc 1 1069 0 is_stmt 1
 770 0034 A36A     		ldr	r3, [r4, #40]
 771 0036 1BB1     		cbz	r3, .L62
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 772              		.loc 1 1071 0
 773 0038 04F11800 		add	r0, r4, #24
 774 003c FFF7FEFF 		bl	uxListRemove
 775              	.LVL74:
 776              	.L62:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777              		.loc 1 1082 0
 778 0040 204A     		ldr	r2, .L72+8
 779 0042 1368     		ldr	r3, [r2]
 780 0044 0133     		adds	r3, r3, #1
 781 0046 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 782              		.loc 1 1084 0
 783 0048 1F4B     		ldr	r3, .L72+12
 784 004a 1B68     		ldr	r3, [r3]
 785 004c A342     		cmp	r3, r4
 786 004e 15D0     		beq	.L70
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 787              		.loc 1 1107 0
 788 0050 1E4A     		ldr	r2, .L72+16
 789 0052 1368     		ldr	r3, [r2]
 790 0054 013B     		subs	r3, r3, #1
 791 0056 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792              		.loc 1 1108 0
 793 0058 2046     		mov	r0, r4
 794 005a FFF7FEFF 		bl	prvDeleteTCB
 795              	.LVL75:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796              		.loc 1 1112 0
 797 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 798              	.LVL76:
 799              	.L64:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 800              		.loc 1 1117 0
 801 0062 FFF7FEFF 		bl	vPortExitCritical
 802              	.LVL77:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 803              		.loc 1 1121 0
 804 0066 1A4B     		ldr	r3, .L72+20
 805 0068 1B68     		ldr	r3, [r3]
 806 006a 1BB1     		cbz	r3, .L59
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 807              		.loc 1 1123 0
 808 006c 164B     		ldr	r3, .L72+12
 809 006e 1B68     		ldr	r3, [r3]
 810 0070 A342     		cmp	r3, r4
 811 0072 0CD0     		beq	.L71
 812              	.L59:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 813              		.loc 1 1133 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 105


 814 0074 38BD     		pop	{r3, r4, r5, pc}
 815              	.LVL78:
 816              	.L69:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817              		.loc 1 1056 0 discriminator 1
 818 0076 144B     		ldr	r3, .L72+12
 819 0078 1C68     		ldr	r4, [r3]
 820              	.LVL79:
 821 007a C7E7     		b	.L60
 822              	.LVL80:
 823              	.L70:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824              		.loc 1 1091 0
 825 007c 2946     		mov	r1, r5
 826 007e 1548     		ldr	r0, .L72+24
 827 0080 FFF7FEFF 		bl	vListInsertEnd
 828              	.LVL81:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829              		.loc 1 1096 0
 830 0084 144A     		ldr	r2, .L72+28
 831 0086 1368     		ldr	r3, [r2]
 832 0088 0133     		adds	r3, r3, #1
 833 008a 1360     		str	r3, [r2]
 834 008c E9E7     		b	.L64
 835              	.L71:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 836              		.loc 1 1125 0
 837 008e 134B     		ldr	r3, .L72+32
 838 0090 1B68     		ldr	r3, [r3]
 839 0092 53B1     		cbz	r3, .L66
 840              	.LBB94:
 841              	.LBB95:
 842              		.loc 2 237 0
 843              		.syntax unified
 844              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 845 0094 4FF05003 			mov r3, #80												
 846 0098 72B6     		cpsid i													
 847 009a 83F31188 		msr basepri, r3											
 848 009e BFF36F8F 		isb														
 849 00a2 BFF34F8F 		dsb														
 850 00a6 62B6     		cpsie i													
 851              	
 852              	@ 0 "" 2
 853              	.LVL82:
 854              		.thumb
 855              		.syntax unified
 856              	.L67:
 857 00a8 FEE7     		b	.L67
 858              	.L66:
 859              	.LBE95:
 860              	.LBE94:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 861              		.loc 1 1126 0
 862 00aa 0D4B     		ldr	r3, .L72+36
 863 00ac 4FF08052 		mov	r2, #268435456
 864 00b0 1A60     		str	r2, [r3]
 865              		.syntax unified
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 106


 866              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 867 00b2 BFF34F8F 		dsb
 868              	@ 0 "" 2
 869              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 870 00b6 BFF36F8F 		isb
 871              	@ 0 "" 2
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 872              		.loc 1 1133 0
 873              		.thumb
 874              		.syntax unified
 875 00ba DBE7     		b	.L59
 876              	.L73:
 877              		.align	2
 878              	.L72:
 879 00bc 00000000 		.word	.LANCHOR4
 880 00c0 00000000 		.word	.LANCHOR13
 881 00c4 00000000 		.word	.LANCHOR12
 882 00c8 00000000 		.word	.LANCHOR10
 883 00cc 00000000 		.word	.LANCHOR9
 884 00d0 00000000 		.word	.LANCHOR11
 885 00d4 00000000 		.word	.LANCHOR7
 886 00d8 00000000 		.word	.LANCHOR15
 887 00dc 00000000 		.word	.LANCHOR16
 888 00e0 04ED00E0 		.word	-536810236
 889              		.cfi_endproc
 890              	.LFE8:
 892              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 893              		.align	1
 894              		.global	uxTaskPriorityGet
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 898              		.fpu fpv5-sp-d16
 900              	uxTaskPriorityGet:
 901              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 902              		.loc 1 1341 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              	.LVL83:
 907 0000 10B5     		push	{r4, lr}
 908              	.LCFI10:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 4, -8
 911              		.cfi_offset 14, -4
 912 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 913              		.loc 1 1345 0
 914 0004 FFF7FEFF 		bl	vPortEnterCritical
 915              	.LVL84:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 916              		.loc 1 1349 0
 917 0008 24B1     		cbz	r4, .L77
 918              	.LVL85:
 919              	.L75:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 107


 920              		.loc 1 1350 0 discriminator 4
 921 000a E46A     		ldr	r4, [r4, #44]
 922              	.LVL86:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923              		.loc 1 1352 0 discriminator 4
 924 000c FFF7FEFF 		bl	vPortExitCritical
 925              	.LVL87:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 926              		.loc 1 1355 0 discriminator 4
 927 0010 2046     		mov	r0, r4
 928 0012 10BD     		pop	{r4, pc}
 929              	.LVL88:
 930              	.L77:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 931              		.loc 1 1349 0 discriminator 1
 932 0014 014B     		ldr	r3, .L78
 933 0016 1C68     		ldr	r4, [r3]
 934              	.LVL89:
 935 0018 F7E7     		b	.L75
 936              	.L79:
 937 001a 00BF     		.align	2
 938              	.L78:
 939 001c 00000000 		.word	.LANCHOR10
 940              		.cfi_endproc
 941              	.LFE10:
 943              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 944              		.align	1
 945              		.global	uxTaskPriorityGetFromISR
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 949              		.fpu fpv5-sp-d16
 951              	uxTaskPriorityGetFromISR:
 952              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 953              		.loc 1 1363 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 957              	.LVL90:
 958 0000 10B5     		push	{r4, lr}
 959              	.LCFI11:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 4, -8
 962              		.cfi_offset 14, -4
 963 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964              		.loc 1 1383 0
 965 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 966              	.LVL91:
 967              	.LBB96:
 968              	.LBB97:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %0											\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 108


 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 969              		.loc 2 255 0
 970              		.syntax unified
 971              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 972 0008 EFF31183 			mrs r3, basepri											
 973 000c 4FF05002 		mov r2, #80												
 974 0010 72B6     		cpsid i													
 975 0012 82F31188 		msr basepri, r2											
 976 0016 BFF36F8F 		isb														
 977 001a BFF34F8F 		dsb														
 978 001e 62B6     		cpsie i													
 979              	
 980              	@ 0 "" 2
 981              		.thumb
 982              		.syntax unified
 983              	.LBE97:
 984              	.LBE96:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 985              		.loc 1 1389 0
 986 0020 1CB1     		cbz	r4, .L83
 987              	.LVL92:
 988              	.L81:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 989              		.loc 1 1390 0 discriminator 4
 990 0022 E06A     		ldr	r0, [r4, #44]
 991              	.LVL93:
 992              	.LBB98:
 993              	.LBB99:
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mrs %0, basepri											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	mov %1, %2												\n"	\
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsid i													\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	isb														\n" \
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	dsb														\n" \
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		"	cpsie i													\n" \
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	);
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	warnings. */
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	return ulOriginalBASEPRI;
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** }
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 109


 273:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 274:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** {
 275:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	__asm volatile
 994              		.loc 2 275 0 discriminator 4
 995              		.syntax unified
 996              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 997 0024 83F31188 			msr basepri, r3	
 998              	@ 0 "" 2
 999              	.LVL94:
 1000              		.thumb
 1001              		.syntax unified
 1002              	.LBE99:
 1003              	.LBE98:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1004              		.loc 1 1395 0 discriminator 4
 1005 0028 10BD     		pop	{r4, pc}
 1006              	.LVL95:
 1007              	.L83:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1008              		.loc 1 1389 0 discriminator 1
 1009 002a 014A     		ldr	r2, .L84
 1010 002c 1468     		ldr	r4, [r2]
 1011              	.LVL96:
 1012 002e F8E7     		b	.L81
 1013              	.L85:
 1014              		.align	2
 1015              	.L84:
 1016 0030 00000000 		.word	.LANCHOR10
 1017              		.cfi_endproc
 1018              	.LFE11:
 1020              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1021              		.align	1
 1022              		.global	vTaskPrioritySet
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1026              		.fpu fpv5-sp-d16
 1028              	vTaskPrioritySet:
 1029              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1030              		.loc 1 1403 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              	.LVL97:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1035              		.loc 1 1408 0
 1036 0000 0629     		cmp	r1, #6
 1037 0002 0AD9     		bls	.L87
 1038              	.LBB100:
 1039              	.LBB101:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1040              		.loc 2 237 0
 1041              		.syntax unified
 1042              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1043 0004 4FF05003 			mov r3, #80												
 1044 0008 72B6     		cpsid i													
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 110


 1045 000a 83F31188 		msr basepri, r3											
 1046 000e BFF36F8F 		isb														
 1047 0012 BFF34F8F 		dsb														
 1048 0016 62B6     		cpsie i													
 1049              	
 1050              	@ 0 "" 2
 1051              	.LVL98:
 1052              		.thumb
 1053              		.syntax unified
 1054              	.L88:
 1055 0018 FEE7     		b	.L88
 1056              	.L87:
 1057              	.LBE101:
 1058              	.LBE100:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1059              		.loc 1 1403 0
 1060 001a 70B5     		push	{r4, r5, r6, lr}
 1061              	.LCFI12:
 1062              		.cfi_def_cfa_offset 16
 1063              		.cfi_offset 4, -16
 1064              		.cfi_offset 5, -12
 1065              		.cfi_offset 6, -8
 1066              		.cfi_offset 14, -4
 1067 001c 0446     		mov	r4, r0
 1068 001e 0D46     		mov	r5, r1
 1069              	.LVL99:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1070              		.loc 1 1420 0
 1071 0020 FFF7FEFF 		bl	vPortEnterCritical
 1072              	.LVL100:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1073              		.loc 1 1424 0
 1074 0024 0CB9     		cbnz	r4, .L89
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1075              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1076 0026 1F4B     		ldr	r3, .L98
 1077 0028 1C68     		ldr	r4, [r3]
 1078              	.LVL101:
 1079              	.L89:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1080              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1081 002a 636C     		ldr	r3, [r4, #68]
 1082              	.LVL102:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1083              		.loc 1 1438 0 discriminator 4
 1084 002c 9D42     		cmp	r5, r3
 1085 002e 33D0     		beq	.L90
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1086              		.loc 1 1442 0
 1087 0030 35D9     		bls	.L91
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1088              		.loc 1 1444 0
 1089 0032 1C4A     		ldr	r2, .L98
 1090 0034 1268     		ldr	r2, [r2]
 1091 0036 A242     		cmp	r2, r4
 1092 0038 01D0     		beq	.L92
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 111


 1093              		.loc 1 1449 0
 1094 003a 1A4A     		ldr	r2, .L98
 1095 003c 1268     		ldr	r2, [r2]
 1096              	.L92:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1097              		.loc 1 1482 0
 1098 003e E66A     		ldr	r6, [r4, #44]
 1099              	.LVL103:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1100              		.loc 1 1488 0
 1101 0040 B342     		cmp	r3, r6
 1102 0042 00D1     		bne	.L93
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1103              		.loc 1 1490 0
 1104 0044 E562     		str	r5, [r4, #44]
 1105              	.L93:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1106              		.loc 1 1498 0
 1107 0046 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1108              		.loc 1 1508 0
 1109 0048 A369     		ldr	r3, [r4, #24]
 1110              	.LVL104:
 1111 004a 002B     		cmp	r3, #0
 1112 004c 02DB     		blt	.L94
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1113              		.loc 1 1510 0
 1114 004e C5F10705 		rsb	r5, r5, #7
 1115              	.LVL105:
 1116 0052 A561     		str	r5, [r4, #24]
 1117              	.L94:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1118              		.loc 1 1521 0
 1119 0054 6269     		ldr	r2, [r4, #20]
 1120 0056 1449     		ldr	r1, .L98+4
 1121 0058 1423     		movs	r3, #20
 1122 005a 03FB0613 		mla	r3, r3, r6, r1
 1123 005e 9A42     		cmp	r2, r3
 1124 0060 1AD1     		bne	.L90
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1125              		.loc 1 1526 0
 1126 0062 251D     		adds	r5, r4, #4
 1127 0064 2846     		mov	r0, r5
 1128 0066 FFF7FEFF 		bl	uxListRemove
 1129              	.LVL106:
 1130 006a 38B9     		cbnz	r0, .L95
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1131              		.loc 1 1531 0
 1132 006c 0123     		movs	r3, #1
 1133 006e 03FA06F2 		lsl	r2, r3, r6
 1134 0072 0E49     		ldr	r1, .L98+8
 1135 0074 0B68     		ldr	r3, [r1]
 1136 0076 23EA0203 		bic	r3, r3, r2
 1137 007a 0B60     		str	r3, [r1]
 1138              	.L95:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1139              		.loc 1 1537 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 112


 1140 007c E26A     		ldr	r2, [r4, #44]
 1141 007e 0123     		movs	r3, #1
 1142 0080 9340     		lsls	r3, r3, r2
 1143 0082 0A49     		ldr	r1, .L98+8
 1144 0084 0868     		ldr	r0, [r1]
 1145 0086 0343     		orrs	r3, r3, r0
 1146 0088 0B60     		str	r3, [r1]
 1147 008a 2946     		mov	r1, r5
 1148 008c 064B     		ldr	r3, .L98+4
 1149 008e 1420     		movs	r0, #20
 1150 0090 00FB0230 		mla	r0, r0, r2, r3
 1151 0094 FFF7FEFF 		bl	vListInsertEnd
 1152              	.LVL107:
 1153              	.L90:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1154              		.loc 1 1558 0
 1155 0098 FFF7FEFF 		bl	vPortExitCritical
 1156              	.LVL108:
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1157              		.loc 1 1559 0
 1158 009c 70BD     		pop	{r4, r5, r6, pc}
 1159              	.LVL109:
 1160              	.L91:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1161              		.loc 1 1465 0
 1162 009e 014A     		ldr	r2, .L98
 1163 00a0 1268     		ldr	r2, [r2]
 1164 00a2 CCE7     		b	.L92
 1165              	.L99:
 1166              		.align	2
 1167              	.L98:
 1168 00a4 00000000 		.word	.LANCHOR10
 1169 00a8 00000000 		.word	.LANCHOR4
 1170 00ac 00000000 		.word	.LANCHOR13
 1171              		.cfi_endproc
 1172              	.LFE12:
 1174              		.section	.text.vTaskResume,"ax",%progbits
 1175              		.align	1
 1176              		.global	vTaskResume
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1180              		.fpu fpv5-sp-d16
 1182              	vTaskResume:
 1183              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1184              		.loc 1 1703 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 0
 1187              		@ frame_needed = 0, uses_anonymous_args = 0
 1188              	.LVL110:
 1189 0000 38B5     		push	{r3, r4, r5, lr}
 1190              	.LCFI13:
 1191              		.cfi_def_cfa_offset 16
 1192              		.cfi_offset 3, -16
 1193              		.cfi_offset 4, -12
 1194              		.cfi_offset 5, -8
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 113


 1195              		.cfi_offset 14, -4
 1196              	.LVL111:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1197              		.loc 1 1707 0
 1198 0002 68B1     		cbz	r0, .L106
 1199 0004 0446     		mov	r4, r0
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1200              		.loc 1 1711 0 discriminator 1
 1201 0006 164B     		ldr	r3, .L108
 1202 0008 1B68     		ldr	r3, [r3]
 1203 000a 8342     		cmp	r3, r0
 1204 000c 07D0     		beq	.L100
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1205              		.loc 1 1713 0
 1206 000e FFF7FEFF 		bl	vPortEnterCritical
 1207              	.LVL112:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1208              		.loc 1 1715 0
 1209 0012 2046     		mov	r0, r4
 1210 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1211              	.LVL113:
 1212 0018 68B9     		cbnz	r0, .L107
 1213              	.L104:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1214              		.loc 1 1742 0
 1215 001a FFF7FEFF 		bl	vPortExitCritical
 1216              	.LVL114:
 1217              	.L100:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1218              		.loc 1 1748 0
 1219 001e 38BD     		pop	{r3, r4, r5, pc}
 1220              	.LVL115:
 1221              	.L106:
 1222              	.LBB102:
 1223              	.LBB103:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1224              		.loc 2 237 0
 1225              		.syntax unified
 1226              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1227 0020 4FF05003 			mov r3, #80												
 1228 0024 72B6     		cpsid i													
 1229 0026 83F31188 		msr basepri, r3											
 1230 002a BFF36F8F 		isb														
 1231 002e BFF34F8F 		dsb														
 1232 0032 62B6     		cpsie i													
 1233              	
 1234              	@ 0 "" 2
 1235              	.LVL116:
 1236              		.thumb
 1237              		.syntax unified
 1238              	.L102:
 1239 0034 FEE7     		b	.L102
 1240              	.LVL117:
 1241              	.L107:
 1242              	.LBE103:
 1243              	.LBE102:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 114


 1244              		.loc 1 1721 0
 1245 0036 251D     		adds	r5, r4, #4
 1246 0038 2846     		mov	r0, r5
 1247 003a FFF7FEFF 		bl	uxListRemove
 1248              	.LVL118:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1249              		.loc 1 1722 0
 1250 003e E26A     		ldr	r2, [r4, #44]
 1251 0040 0123     		movs	r3, #1
 1252 0042 9340     		lsls	r3, r3, r2
 1253 0044 0749     		ldr	r1, .L108+4
 1254 0046 0868     		ldr	r0, [r1]
 1255 0048 0343     		orrs	r3, r3, r0
 1256 004a 0B60     		str	r3, [r1]
 1257 004c 2946     		mov	r1, r5
 1258 004e 064B     		ldr	r3, .L108+8
 1259 0050 1420     		movs	r0, #20
 1260 0052 00FB0230 		mla	r0, r0, r2, r3
 1261 0056 FFF7FEFF 		bl	vListInsertEnd
 1262              	.LVL119:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1263              		.loc 1 1725 0
 1264 005a 014B     		ldr	r3, .L108
 1265 005c 1B68     		ldr	r3, [r3]
 1266 005e DCE7     		b	.L104
 1267              	.L109:
 1268              		.align	2
 1269              	.L108:
 1270 0060 00000000 		.word	.LANCHOR10
 1271 0064 00000000 		.word	.LANCHOR13
 1272 0068 00000000 		.word	.LANCHOR4
 1273              		.cfi_endproc
 1274              	.LFE15:
 1276              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1277              		.align	1
 1278              		.global	xTaskResumeFromISR
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu fpv5-sp-d16
 1284              	xTaskResumeFromISR:
 1285              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1286              		.loc 1 1757 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              	.LVL120:
 1291 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1292              	.LCFI14:
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 3, -24
 1295              		.cfi_offset 4, -20
 1296              		.cfi_offset 5, -16
 1297              		.cfi_offset 6, -12
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 115


 1300              	.LVL121:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1301              		.loc 1 1762 0
 1302 0002 50B9     		cbnz	r0, .L111
 1303              	.LBB104:
 1304              	.LBB105:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1305              		.loc 2 237 0
 1306              		.syntax unified
 1307              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1308 0004 4FF05003 			mov r3, #80												
 1309 0008 72B6     		cpsid i													
 1310 000a 83F31188 		msr basepri, r3											
 1311 000e BFF36F8F 		isb														
 1312 0012 BFF34F8F 		dsb														
 1313 0016 62B6     		cpsie i													
 1314              	
 1315              	@ 0 "" 2
 1316              	.LVL122:
 1317              		.thumb
 1318              		.syntax unified
 1319              	.L112:
 1320 0018 FEE7     		b	.L112
 1321              	.L111:
 1322 001a 0446     		mov	r4, r0
 1323              	.LBE105:
 1324              	.LBE104:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1325              		.loc 1 1780 0
 1326 001c FFF7FEFF 		bl	vPortValidateInterruptPriority
 1327              	.LVL123:
 1328              	.LBB106:
 1329              	.LBB107:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1330              		.loc 2 255 0
 1331              		.syntax unified
 1332              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1333 0020 EFF31187 			mrs r7, basepri											
 1334 0024 4FF05003 		mov r3, #80												
 1335 0028 72B6     		cpsid i													
 1336 002a 83F31188 		msr basepri, r3											
 1337 002e BFF36F8F 		isb														
 1338 0032 BFF34F8F 		dsb														
 1339 0036 62B6     		cpsie i													
 1340              	
 1341              	@ 0 "" 2
 1342              		.thumb
 1343              		.syntax unified
 1344              	.LBE107:
 1345              	.LBE106:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1346              		.loc 1 1784 0
 1347 0038 2046     		mov	r0, r4
 1348 003a FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1349              	.LVL124:
 1350 003e 40B3     		cbz	r0, .L116
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 116


 1351              		.loc 1 1789 0
 1352 0040 154B     		ldr	r3, .L119
 1353 0042 1B68     		ldr	r3, [r3]
 1354 0044 F3B9     		cbnz	r3, .L114
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1355              		.loc 1 1793 0
 1356 0046 E26A     		ldr	r2, [r4, #44]
 1357 0048 144B     		ldr	r3, .L119+4
 1358 004a 1B68     		ldr	r3, [r3]
 1359 004c DB6A     		ldr	r3, [r3, #44]
 1360 004e 9A42     		cmp	r2, r3
 1361 0050 16D2     		bcs	.L117
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1362              		.loc 1 1758 0
 1363 0052 0025     		movs	r5, #0
 1364              	.L115:
 1365              	.LVL125:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1366              		.loc 1 1802 0
 1367 0054 261D     		adds	r6, r4, #4
 1368 0056 3046     		mov	r0, r6
 1369 0058 FFF7FEFF 		bl	uxListRemove
 1370              	.LVL126:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1371              		.loc 1 1803 0
 1372 005c E26A     		ldr	r2, [r4, #44]
 1373 005e 0123     		movs	r3, #1
 1374 0060 9340     		lsls	r3, r3, r2
 1375 0062 0F49     		ldr	r1, .L119+8
 1376 0064 0868     		ldr	r0, [r1]
 1377 0066 0343     		orrs	r3, r3, r0
 1378 0068 0B60     		str	r3, [r1]
 1379 006a 3146     		mov	r1, r6
 1380 006c 0D4B     		ldr	r3, .L119+12
 1381 006e 1420     		movs	r0, #20
 1382 0070 00FB0230 		mla	r0, r0, r2, r3
 1383 0074 FFF7FEFF 		bl	vListInsertEnd
 1384              	.LVL127:
 1385              	.L113:
 1386              	.LBB108:
 1387              	.LBB109:
 1388              		.loc 2 275 0
 1389              		.syntax unified
 1390              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1391 0078 87F31188 			msr basepri, r7	
 1392              	@ 0 "" 2
 1393              	.LVL128:
 1394              		.thumb
 1395              		.syntax unified
 1396              	.LBE109:
 1397              	.LBE108:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1398              		.loc 1 1821 0
 1399 007c 2846     		mov	r0, r5
 1400 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1401              	.LVL129:
 1402              	.L117:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 117


1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1403              		.loc 1 1795 0
 1404 0080 0125     		movs	r5, #1
 1405 0082 E7E7     		b	.L115
 1406              	.L114:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1407              		.loc 1 1810 0
 1408 0084 04F11801 		add	r1, r4, #24
 1409 0088 0748     		ldr	r0, .L119+16
 1410 008a FFF7FEFF 		bl	vListInsertEnd
 1411              	.LVL130:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1412              		.loc 1 1758 0
 1413 008e 0025     		movs	r5, #0
 1414 0090 F2E7     		b	.L113
 1415              	.L116:
 1416 0092 0025     		movs	r5, #0
 1417 0094 F0E7     		b	.L113
 1418              	.L120:
 1419 0096 00BF     		.align	2
 1420              	.L119:
 1421 0098 00000000 		.word	.LANCHOR16
 1422 009c 00000000 		.word	.LANCHOR10
 1423 00a0 00000000 		.word	.LANCHOR13
 1424 00a4 00000000 		.word	.LANCHOR4
 1425 00a8 00000000 		.word	.LANCHOR1
 1426              		.cfi_endproc
 1427              	.LFE16:
 1429              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1430              		.align	1
 1431              		.global	vTaskStartScheduler
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv5-sp-d16
 1437              	vTaskStartScheduler:
 1438              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1439              		.loc 1 1827 0
 1440              		.cfi_startproc
 1441              		@ args = 0, pretend = 0, frame = 0
 1442              		@ frame_needed = 0, uses_anonymous_args = 0
 1443 0000 00B5     		push	{lr}
 1444              	.LCFI15:
 1445              		.cfi_def_cfa_offset 4
 1446              		.cfi_offset 14, -4
 1447 0002 83B0     		sub	sp, sp, #12
 1448              	.LCFI16:
 1449              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1450              		.loc 1 1860 0
 1451 0004 194B     		ldr	r3, .L128
 1452 0006 0193     		str	r3, [sp, #4]
 1453 0008 0023     		movs	r3, #0
 1454 000a 0093     		str	r3, [sp]
 1455 000c 8022     		movs	r2, #128
 1456 000e 1849     		ldr	r1, .L128+4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 118


 1457 0010 1848     		ldr	r0, .L128+8
 1458 0012 FFF7FEFF 		bl	xTaskCreate
 1459              	.LVL131:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1460              		.loc 1 1881 0
 1461 0016 0128     		cmp	r0, #1
 1462 0018 05D0     		beq	.L126
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1463              		.loc 1 1924 0
 1464 001a B0F1FF3F 		cmp	r0, #-1
 1465 001e 19D0     		beq	.L127
 1466              	.LVL132:
 1467              	.L121:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1468              		.loc 1 1930 0
 1469 0020 03B0     		add	sp, sp, #12
 1470              	.LCFI17:
 1471              		.cfi_remember_state
 1472              		.cfi_def_cfa_offset 4
 1473              		@ sp needed
 1474 0022 5DF804FB 		ldr	pc, [sp], #4
 1475              	.LVL133:
 1476              	.L126:
 1477              	.LCFI18:
 1478              		.cfi_restore_state
 1479              	.LBB110:
 1480              	.LBB111:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1481              		.loc 2 237 0
 1482              		.syntax unified
 1483              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1484 0026 4FF05003 			mov r3, #80												
 1485 002a 72B6     		cpsid i													
 1486 002c 83F31188 		msr basepri, r3											
 1487 0030 BFF36F8F 		isb														
 1488 0034 BFF34F8F 		dsb														
 1489 0038 62B6     		cpsie i													
 1490              	
 1491              	@ 0 "" 2
 1492              		.thumb
 1493              		.syntax unified
 1494              	.LBE111:
 1495              	.LBE110:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1496              		.loc 1 1898 0
 1497 003a 0F4B     		ldr	r3, .L128+12
 1498 003c 4FF0FF32 		mov	r2, #-1
 1499 0040 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1500              		.loc 1 1899 0
 1501 0042 0E4B     		ldr	r3, .L128+16
 1502 0044 0122     		movs	r2, #1
 1503 0046 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1504              		.loc 1 1900 0
 1505 0048 0D4B     		ldr	r3, .L128+20
 1506 004a 0022     		movs	r2, #0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 119


 1507 004c 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1508              		.loc 1 1909 0
 1509 004e FFF7FEFF 		bl	xPortStartScheduler
 1510              	.LVL134:
 1511 0052 E5E7     		b	.L121
 1512              	.LVL135:
 1513              	.L127:
 1514              	.LBB112:
 1515              	.LBB113:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1516              		.loc 2 237 0
 1517              		.syntax unified
 1518              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1519 0054 4FF05003 			mov r3, #80												
 1520 0058 72B6     		cpsid i													
 1521 005a 83F31188 		msr basepri, r3											
 1522 005e BFF36F8F 		isb														
 1523 0062 BFF34F8F 		dsb														
 1524 0066 62B6     		cpsie i													
 1525              	
 1526              	@ 0 "" 2
 1527              	.LVL136:
 1528              		.thumb
 1529              		.syntax unified
 1530              	.L124:
 1531 0068 FEE7     		b	.L124
 1532              	.L129:
 1533 006a 00BF     		.align	2
 1534              	.L128:
 1535 006c 00000000 		.word	.LANCHOR17
 1536 0070 00000000 		.word	.LC0
 1537 0074 00000000 		.word	prvIdleTask
 1538 0078 00000000 		.word	.LANCHOR3
 1539 007c 00000000 		.word	.LANCHOR11
 1540 0080 00000000 		.word	.LANCHOR14
 1541              	.LBE113:
 1542              	.LBE112:
 1543              		.cfi_endproc
 1544              	.LFE17:
 1546              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1547              		.align	1
 1548              		.global	vTaskEndScheduler
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv5-sp-d16
 1554              	vTaskEndScheduler:
 1555              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1556              		.loc 1 1934 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560 0000 08B5     		push	{r3, lr}
 1561              	.LCFI19:
 1562              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 120


 1563              		.cfi_offset 3, -8
 1564              		.cfi_offset 14, -4
 1565              	.LBB114:
 1566              	.LBB115:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1567              		.loc 2 237 0
 1568              		.syntax unified
 1569              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1570 0002 4FF05003 			mov r3, #80												
 1571 0006 72B6     		cpsid i													
 1572 0008 83F31188 		msr basepri, r3											
 1573 000c BFF36F8F 		isb														
 1574 0010 BFF34F8F 		dsb														
 1575 0014 62B6     		cpsie i													
 1576              	
 1577              	@ 0 "" 2
 1578              		.thumb
 1579              		.syntax unified
 1580              	.LBE115:
 1581              	.LBE114:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1582              		.loc 1 1939 0
 1583 0016 034B     		ldr	r3, .L132
 1584 0018 0022     		movs	r2, #0
 1585 001a 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1586              		.loc 1 1940 0
 1587 001c FFF7FEFF 		bl	vPortEndScheduler
 1588              	.LVL137:
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1589              		.loc 1 1941 0
 1590 0020 08BD     		pop	{r3, pc}
 1591              	.L133:
 1592 0022 00BF     		.align	2
 1593              	.L132:
 1594 0024 00000000 		.word	.LANCHOR11
 1595              		.cfi_endproc
 1596              	.LFE18:
 1598              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1599              		.align	1
 1600              		.global	vTaskSuspendAll
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
 1604              		.fpu fpv5-sp-d16
 1606              	vTaskSuspendAll:
 1607              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1608              		.loc 1 1945 0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1613              		.loc 1 1950 0
 1614 0000 024A     		ldr	r2, .L135
 1615 0002 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 121


 1616 0004 0133     		adds	r3, r3, #1
 1617 0006 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1618              		.loc 1 1951 0
 1619 0008 7047     		bx	lr
 1620              	.L136:
 1621 000a 00BF     		.align	2
 1622              	.L135:
 1623 000c 00000000 		.word	.LANCHOR16
 1624              		.cfi_endproc
 1625              	.LFE19:
 1627              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1628              		.align	1
 1629              		.global	xTaskGetTickCount
 1630              		.syntax unified
 1631              		.thumb
 1632              		.thumb_func
 1633              		.fpu fpv5-sp-d16
 1635              	xTaskGetTickCount:
 1636              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1637              		.loc 1 2128 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 1641              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1642              		.loc 1 2134 0
 1643 0000 014B     		ldr	r3, .L138
 1644 0002 1868     		ldr	r0, [r3]
 1645              	.LVL138:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1646              		.loc 1 2139 0
 1647 0004 7047     		bx	lr
 1648              	.L139:
 1649 0006 00BF     		.align	2
 1650              	.L138:
 1651 0008 00000000 		.word	.LANCHOR14
 1652              		.cfi_endproc
 1653              	.LFE21:
 1655              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1656              		.align	1
 1657              		.global	xTaskGetTickCountFromISR
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu fpv5-sp-d16
 1663              	xTaskGetTickCountFromISR:
 1664              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1665              		.loc 1 2143 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669 0000 08B5     		push	{r3, lr}
 1670              	.LCFI20:
 1671              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 122


 1672              		.cfi_offset 3, -8
 1673              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1674              		.loc 1 2161 0
 1675 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1676              	.LVL139:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1677              		.loc 1 2165 0
 1678 0006 014B     		ldr	r3, .L142
 1679 0008 1868     		ldr	r0, [r3]
 1680              	.LVL140:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1681              		.loc 1 2170 0
 1682 000a 08BD     		pop	{r3, pc}
 1683              	.L143:
 1684              		.align	2
 1685              	.L142:
 1686 000c 00000000 		.word	.LANCHOR14
 1687              		.cfi_endproc
 1688              	.LFE22:
 1690              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1691              		.align	1
 1692              		.global	uxTaskGetNumberOfTasks
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1696              		.fpu fpv5-sp-d16
 1698              	uxTaskGetNumberOfTasks:
 1699              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1700              		.loc 1 2174 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1705              		.loc 1 2177 0
 1706 0000 014B     		ldr	r3, .L145
 1707 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1708              		.loc 1 2178 0
 1709 0004 7047     		bx	lr
 1710              	.L146:
 1711 0006 00BF     		.align	2
 1712              	.L145:
 1713 0008 00000000 		.word	.LANCHOR9
 1714              		.cfi_endproc
 1715              	.LFE23:
 1717              		.section	.text.pcTaskGetName,"ax",%progbits
 1718              		.align	1
 1719              		.global	pcTaskGetName
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1723              		.fpu fpv5-sp-d16
 1725              	pcTaskGetName:
 1726              	.LFB24:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 123


2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1727              		.loc 1 2182 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732              	.LVL141:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1733              		.loc 1 2187 0
 1734 0000 0346     		mov	r3, r0
 1735 0002 18B1     		cbz	r0, .L151
 1736              	.LVL142:
 1737              	.L148:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1738              		.loc 1 2188 0 discriminator 4
 1739 0004 2BB1     		cbz	r3, .L152
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1740              		.loc 1 2190 0
 1741 0006 03F13400 		add	r0, r3, #52
 1742 000a 7047     		bx	lr
 1743              	.LVL143:
 1744              	.L151:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1745              		.loc 1 2187 0 discriminator 1
 1746 000c 064B     		ldr	r3, .L153
 1747 000e 1B68     		ldr	r3, [r3]
 1748              	.LVL144:
 1749 0010 F8E7     		b	.L148
 1750              	.LVL145:
 1751              	.L152:
 1752              	.LBB116:
 1753              	.LBB117:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1754              		.loc 2 237 0
 1755              		.syntax unified
 1756              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1757 0012 4FF05003 			mov r3, #80												
 1758 0016 72B6     		cpsid i													
 1759 0018 83F31188 		msr basepri, r3											
 1760 001c BFF36F8F 		isb														
 1761 0020 BFF34F8F 		dsb														
 1762 0024 62B6     		cpsie i													
 1763              	
 1764              	@ 0 "" 2
 1765              	.LVL146:
 1766              		.thumb
 1767              		.syntax unified
 1768              	.L150:
 1769 0026 FEE7     		b	.L150
 1770              	.L154:
 1771              		.align	2
 1772              	.L153:
 1773 0028 00000000 		.word	.LANCHOR10
 1774              	.LBE117:
 1775              	.LBE116:
 1776              		.cfi_endproc
 1777              	.LFE24:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 124


 1779              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1780              		.align	1
 1781              		.global	xTaskIncrementTick
 1782              		.syntax unified
 1783              		.thumb
 1784              		.thumb_func
 1785              		.fpu fpv5-sp-d16
 1787              	xTaskIncrementTick:
 1788              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1789              		.loc 1 2500 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793              	.LVL147:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1794              		.loc 1 2509 0
 1795 0000 2F4B     		ldr	r3, .L171
 1796 0002 1B68     		ldr	r3, [r3]
 1797 0004 002B     		cmp	r3, #0
 1798 0006 55D1     		bne	.L156
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1799              		.loc 1 2500 0
 1800 0008 70B5     		push	{r4, r5, r6, lr}
 1801              	.LCFI21:
 1802              		.cfi_def_cfa_offset 16
 1803              		.cfi_offset 4, -16
 1804              		.cfi_offset 5, -12
 1805              		.cfi_offset 6, -8
 1806              		.cfi_offset 14, -4
 1807              	.LBB118:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1808              		.loc 1 2513 0
 1809 000a 2E4B     		ldr	r3, .L171+4
 1810 000c 1C68     		ldr	r4, [r3]
 1811 000e 0134     		adds	r4, r4, #1
 1812              	.LVL148:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1813              		.loc 1 2517 0
 1814 0010 1C60     		str	r4, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1815              		.loc 1 2519 0
 1816 0012 D4B9     		cbnz	r4, .L157
 1817              	.LBB119:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1818              		.loc 1 2521 0
 1819 0014 2C4B     		ldr	r3, .L171+8
 1820 0016 1B68     		ldr	r3, [r3]
 1821 0018 1B68     		ldr	r3, [r3]
 1822 001a 53B1     		cbz	r3, .L158
 1823              	.LBB120:
 1824              	.LBB121:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1825              		.loc 2 237 0
 1826              		.syntax unified
 1827              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1828 001c 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 125


 1829 0020 72B6     		cpsid i													
 1830 0022 83F31188 		msr basepri, r3											
 1831 0026 BFF36F8F 		isb														
 1832 002a BFF34F8F 		dsb														
 1833 002e 62B6     		cpsie i													
 1834              	
 1835              	@ 0 "" 2
 1836              	.LVL149:
 1837              		.thumb
 1838              		.syntax unified
 1839              	.L159:
 1840 0030 FEE7     		b	.L159
 1841              	.L158:
 1842              	.LBE121:
 1843              	.LBE120:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1844              		.loc 1 2521 0 discriminator 2
 1845 0032 254A     		ldr	r2, .L171+8
 1846 0034 1168     		ldr	r1, [r2]
 1847              	.LVL150:
 1848 0036 254B     		ldr	r3, .L171+12
 1849 0038 1868     		ldr	r0, [r3]
 1850 003a 1060     		str	r0, [r2]
 1851 003c 1960     		str	r1, [r3]
 1852 003e 244A     		ldr	r2, .L171+16
 1853 0040 1368     		ldr	r3, [r2]
 1854 0042 0133     		adds	r3, r3, #1
 1855 0044 1360     		str	r3, [r2]
 1856 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1857              	.LVL151:
 1858              	.L157:
 1859              	.LBE119:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1860              		.loc 1 2532 0
 1861 004a 224B     		ldr	r3, .L171+20
 1862 004c 1B68     		ldr	r3, [r3]
 1863 004e A342     		cmp	r3, r4
 1864 0050 18D9     		bls	.L164
 1865              	.L160:
 1866              	.LBE118:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1867              		.loc 1 2668 0
 1868 0052 0020     		movs	r0, #0
 1869 0054 70BD     		pop	{r4, r5, r6, pc}
 1870              	.LVL152:
 1871              	.L169:
 1872              	.LBB122:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 1873              		.loc 1 2543 0
 1874 0056 1F4B     		ldr	r3, .L171+20
 1875 0058 4FF0FF32 		mov	r2, #-1
 1876 005c 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1877              		.loc 1 2544 0
 1878 005e F8E7     		b	.L160
 1879              	.LVL153:
 1880              	.L170:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 126


2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 1881              		.loc 1 2562 0
 1882 0060 1C4A     		ldr	r2, .L171+20
 1883 0062 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1884              		.loc 1 2563 0
 1885 0064 F5E7     		b	.L160
 1886              	.LVL154:
 1887              	.L163:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1888              		.loc 1 2586 0
 1889 0066 EB6A     		ldr	r3, [r5, #44]
 1890 0068 0122     		movs	r2, #1
 1891 006a 9A40     		lsls	r2, r2, r3
 1892 006c 1A49     		ldr	r1, .L171+24
 1893 006e 0868     		ldr	r0, [r1]
 1894 0070 0243     		orrs	r2, r2, r0
 1895 0072 0A60     		str	r2, [r1]
 1896 0074 03EB8303 		add	r3, r3, r3, lsl #2
 1897 0078 9A00     		lsls	r2, r3, #2
 1898 007a 3146     		mov	r1, r6
 1899 007c 1748     		ldr	r0, .L171+28
 1900 007e 1044     		add	r0, r0, r2
 1901 0080 FFF7FEFF 		bl	vListInsertEnd
 1902              	.LVL155:
 1903              	.L164:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1904              		.loc 1 2536 0
 1905 0084 104B     		ldr	r3, .L171+8
 1906 0086 1B68     		ldr	r3, [r3]
 1907 0088 1B68     		ldr	r3, [r3]
 1908 008a 002B     		cmp	r3, #0
 1909 008c E3D0     		beq	.L169
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1910              		.loc 1 2552 0
 1911 008e 0E4B     		ldr	r3, .L171+8
 1912 0090 1B68     		ldr	r3, [r3]
 1913 0092 DB68     		ldr	r3, [r3, #12]
 1914 0094 DD68     		ldr	r5, [r3, #12]
 1915              	.LVL156:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1916              		.loc 1 2553 0
 1917 0096 6B68     		ldr	r3, [r5, #4]
 1918              	.LVL157:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1919              		.loc 1 2555 0
 1920 0098 9C42     		cmp	r4, r3
 1921 009a E1D3     		bcc	.L170
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1922              		.loc 1 2571 0
 1923 009c 2E1D     		adds	r6, r5, #4
 1924 009e 3046     		mov	r0, r6
 1925 00a0 FFF7FEFF 		bl	uxListRemove
 1926              	.LVL158:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1927              		.loc 1 2575 0
 1928 00a4 AB6A     		ldr	r3, [r5, #40]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 127


 1929 00a6 002B     		cmp	r3, #0
 1930 00a8 DDD0     		beq	.L163
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1931              		.loc 1 2577 0
 1932 00aa 05F11800 		add	r0, r5, #24
 1933 00ae FFF7FEFF 		bl	uxListRemove
 1934              	.LVL159:
 1935 00b2 D8E7     		b	.L163
 1936              	.LVL160:
 1937              	.L156:
 1938              	.LCFI22:
 1939              		.cfi_def_cfa_offset 0
 1940              		.cfi_restore 4
 1941              		.cfi_restore 5
 1942              		.cfi_restore 6
 1943              		.cfi_restore 14
 1944              	.LBE122:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1945              		.loc 1 2643 0
 1946 00b4 0A4A     		ldr	r2, .L171+32
 1947 00b6 1368     		ldr	r3, [r2]
 1948 00b8 0133     		adds	r3, r3, #1
 1949 00ba 1360     		str	r3, [r2]
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1950              		.loc 1 2668 0
 1951 00bc 0020     		movs	r0, #0
 1952 00be 7047     		bx	lr
 1953              	.L172:
 1954              		.align	2
 1955              	.L171:
 1956 00c0 00000000 		.word	.LANCHOR16
 1957 00c4 00000000 		.word	.LANCHOR14
 1958 00c8 00000000 		.word	.LANCHOR2
 1959 00cc 00000000 		.word	.LANCHOR8
 1960 00d0 00000000 		.word	.LANCHOR18
 1961 00d4 00000000 		.word	.LANCHOR3
 1962 00d8 00000000 		.word	.LANCHOR13
 1963 00dc 00000000 		.word	.LANCHOR4
 1964 00e0 00000000 		.word	.LANCHOR19
 1965              		.cfi_endproc
 1966              	.LFE25:
 1968              		.section	.text.xTaskResumeAll,"ax",%progbits
 1969              		.align	1
 1970              		.global	xTaskResumeAll
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu fpv5-sp-d16
 1976              	xTaskResumeAll:
 1977              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 1978              		.loc 1 2018 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982 0000 38B5     		push	{r3, r4, r5, lr}
 1983              	.LCFI23:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 128


 1984              		.cfi_def_cfa_offset 16
 1985              		.cfi_offset 3, -16
 1986              		.cfi_offset 4, -12
 1987              		.cfi_offset 5, -8
 1988              		.cfi_offset 14, -4
 1989              	.LVL161:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1990              		.loc 1 2024 0
 1991 0002 2C4B     		ldr	r3, .L187
 1992 0004 1B68     		ldr	r3, [r3]
 1993 0006 53B9     		cbnz	r3, .L174
 1994              	.LBB123:
 1995              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 1996              		.loc 2 237 0
 1997              		.syntax unified
 1998              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1999 0008 4FF05003 			mov r3, #80												
 2000 000c 72B6     		cpsid i													
 2001 000e 83F31188 		msr basepri, r3											
 2002 0012 BFF36F8F 		isb														
 2003 0016 BFF34F8F 		dsb														
 2004 001a 62B6     		cpsie i													
 2005              	
 2006              	@ 0 "" 2
 2007              	.LVL162:
 2008              		.thumb
 2009              		.syntax unified
 2010              	.L175:
 2011 001c FEE7     		b	.L175
 2012              	.L174:
 2013              	.LBE124:
 2014              	.LBE123:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2015              		.loc 1 2031 0
 2016 001e FFF7FEFF 		bl	vPortEnterCritical
 2017              	.LVL163:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2018              		.loc 1 2033 0
 2019 0022 244B     		ldr	r3, .L187
 2020 0024 1A68     		ldr	r2, [r3]
 2021 0026 013A     		subs	r2, r2, #1
 2022 0028 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2023              		.loc 1 2035 0
 2024 002a 1B68     		ldr	r3, [r3]
 2025 002c 13B9     		cbnz	r3, .L176
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2026              		.loc 1 2037 0
 2027 002e 224B     		ldr	r3, .L187+4
 2028 0030 1B68     		ldr	r3, [r3]
 2029 0032 1BB9     		cbnz	r3, .L184
 2030              	.LVL164:
 2031              	.L176:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2032              		.loc 1 2121 0
 2033 0034 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 129


 2034              	.LVL165:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2035              		.loc 1 2124 0
 2036 0038 0020     		movs	r0, #0
 2037 003a 38BD     		pop	{r3, r4, r5, pc}
 2038              	.LVL166:
 2039              	.L184:
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2040              		.loc 1 2019 0
 2041 003c 0024     		movs	r4, #0
 2042              	.LVL167:
 2043              	.L177:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2044              		.loc 1 2041 0
 2045 003e 1F4B     		ldr	r3, .L187+8
 2046 0040 1B68     		ldr	r3, [r3]
 2047 0042 1BB3     		cbz	r3, .L186
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2048              		.loc 1 2043 0
 2049 0044 1D4B     		ldr	r3, .L187+8
 2050 0046 DB68     		ldr	r3, [r3, #12]
 2051 0048 DC68     		ldr	r4, [r3, #12]
 2052              	.LVL168:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2053              		.loc 1 2044 0
 2054 004a 04F11800 		add	r0, r4, #24
 2055 004e FFF7FEFF 		bl	uxListRemove
 2056              	.LVL169:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2057              		.loc 1 2045 0
 2058 0052 251D     		adds	r5, r4, #4
 2059 0054 2846     		mov	r0, r5
 2060 0056 FFF7FEFF 		bl	uxListRemove
 2061              	.LVL170:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2062              		.loc 1 2046 0
 2063 005a E36A     		ldr	r3, [r4, #44]
 2064 005c 0122     		movs	r2, #1
 2065 005e 9A40     		lsls	r2, r2, r3
 2066 0060 1749     		ldr	r1, .L187+12
 2067 0062 0868     		ldr	r0, [r1]
 2068 0064 0243     		orrs	r2, r2, r0
 2069 0066 0A60     		str	r2, [r1]
 2070 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2071 006c 9A00     		lsls	r2, r3, #2
 2072 006e 2946     		mov	r1, r5
 2073 0070 1448     		ldr	r0, .L187+16
 2074 0072 1044     		add	r0, r0, r2
 2075 0074 FFF7FEFF 		bl	vListInsertEnd
 2076              	.LVL171:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2077              		.loc 1 2050 0
 2078 0078 E26A     		ldr	r2, [r4, #44]
 2079 007a 134B     		ldr	r3, .L187+20
 2080 007c 1B68     		ldr	r3, [r3]
 2081 007e DB6A     		ldr	r3, [r3, #44]
 2082 0080 9A42     		cmp	r2, r3
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 130


 2083 0082 DCD3     		bcc	.L177
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2084              		.loc 1 2052 0
 2085 0084 114B     		ldr	r3, .L187+24
 2086 0086 0122     		movs	r2, #1
 2087 0088 1A60     		str	r2, [r3]
 2088 008a D8E7     		b	.L177
 2089              	.L186:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2090              		.loc 1 2060 0
 2091 008c 0CB1     		cbz	r4, .L180
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2092              		.loc 1 2068 0
 2093 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2094              	.LVL172:
 2095              	.L180:
 2096              	.LBB125:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2097              		.loc 1 2076 0
 2098 0092 0F4B     		ldr	r3, .L187+28
 2099 0094 1C68     		ldr	r4, [r3]
 2100              	.LVL173:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2101              		.loc 1 2078 0
 2102 0096 54B1     		cbz	r4, .L181
 2103              	.L183:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2104              		.loc 1 2082 0
 2105 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2106              	.LVL174:
 2107 009c 10B1     		cbz	r0, .L182
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2108              		.loc 1 2084 0
 2109 009e 0B4B     		ldr	r3, .L187+24
 2110 00a0 0122     		movs	r2, #1
 2111 00a2 1A60     		str	r2, [r3]
 2112              	.L182:
 2113              	.LVL175:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2114              		.loc 1 2091 0
 2115 00a4 013C     		subs	r4, r4, #1
 2116              	.LVL176:
 2117 00a6 F7D1     		bne	.L183
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2118              		.loc 1 2093 0
 2119 00a8 094B     		ldr	r3, .L187+28
 2120 00aa 0022     		movs	r2, #0
 2121 00ac 1A60     		str	r2, [r3]
 2122              	.L181:
 2123              	.LBE125:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2124              		.loc 1 2101 0
 2125 00ae 074B     		ldr	r3, .L187+24
 2126 00b0 1B68     		ldr	r3, [r3]
 2127 00b2 BFE7     		b	.L176
 2128              	.L188:
 2129              		.align	2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 131


 2130              	.L187:
 2131 00b4 00000000 		.word	.LANCHOR16
 2132 00b8 00000000 		.word	.LANCHOR9
 2133 00bc 00000000 		.word	.LANCHOR1
 2134 00c0 00000000 		.word	.LANCHOR13
 2135 00c4 00000000 		.word	.LANCHOR4
 2136 00c8 00000000 		.word	.LANCHOR10
 2137 00cc 00000000 		.word	.LANCHOR20
 2138 00d0 00000000 		.word	.LANCHOR19
 2139              		.cfi_endproc
 2140              	.LFE20:
 2142              		.section	.text.vTaskDelay,"ax",%progbits
 2143              		.align	1
 2144              		.global	vTaskDelay
 2145              		.syntax unified
 2146              		.thumb
 2147              		.thumb_func
 2148              		.fpu fpv5-sp-d16
 2150              	vTaskDelay:
 2151              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2152              		.loc 1 1225 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 0
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              	.LVL177:
 2157 0000 10B5     		push	{r4, lr}
 2158              	.LCFI24:
 2159              		.cfi_def_cfa_offset 8
 2160              		.cfi_offset 4, -8
 2161              		.cfi_offset 14, -4
 2162              	.LVL178:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2163              		.loc 1 1229 0
 2164 0002 B8B1     		cbz	r0, .L190
 2165 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2166              		.loc 1 1231 0
 2167 0006 104B     		ldr	r3, .L195
 2168 0008 1B68     		ldr	r3, [r3]
 2169 000a 53B1     		cbz	r3, .L191
 2170              	.LBB126:
 2171              	.LBB127:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2172              		.loc 2 237 0
 2173              		.syntax unified
 2174              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2175 000c 4FF05003 			mov r3, #80												
 2176 0010 72B6     		cpsid i													
 2177 0012 83F31188 		msr basepri, r3											
 2178 0016 BFF36F8F 		isb														
 2179 001a BFF34F8F 		dsb														
 2180 001e 62B6     		cpsie i													
 2181              	
 2182              	@ 0 "" 2
 2183              	.LVL179:
 2184              		.thumb
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 132


 2185              		.syntax unified
 2186              	.L192:
 2187 0020 FEE7     		b	.L192
 2188              	.L191:
 2189              	.LBE127:
 2190              	.LBE126:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2191              		.loc 1 1232 0
 2192 0022 FFF7FEFF 		bl	vTaskSuspendAll
 2193              	.LVL180:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2194              		.loc 1 1243 0
 2195 0026 0021     		movs	r1, #0
 2196 0028 2046     		mov	r0, r4
 2197 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2198              	.LVL181:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2199              		.loc 1 1245 0
 2200 002e FFF7FEFF 		bl	xTaskResumeAll
 2201              	.LVL182:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2202              		.loc 1 1254 0
 2203 0032 38B9     		cbnz	r0, .L189
 2204              	.LVL183:
 2205              	.L190:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2206              		.loc 1 1256 0
 2207 0034 054B     		ldr	r3, .L195+4
 2208 0036 4FF08052 		mov	r2, #268435456
 2209 003a 1A60     		str	r2, [r3]
 2210              		.syntax unified
 2211              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2212 003c BFF34F8F 		dsb
 2213              	@ 0 "" 2
 2214              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2215 0040 BFF36F8F 		isb
 2216              	@ 0 "" 2
 2217              		.thumb
 2218              		.syntax unified
 2219              	.L189:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2220              		.loc 1 1262 0
 2221 0044 10BD     		pop	{r4, pc}
 2222              	.L196:
 2223 0046 00BF     		.align	2
 2224              	.L195:
 2225 0048 00000000 		.word	.LANCHOR16
 2226 004c 04ED00E0 		.word	-536810236
 2227              		.cfi_endproc
 2228              	.LFE9:
 2230              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2231              		.align	1
 2232              		.syntax unified
 2233              		.thumb
 2234              		.thumb_func
 2235              		.fpu fpv5-sp-d16
 2237              	prvCheckTasksWaitingTermination:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 133


 2238              	.LFB36:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2239              		.loc 1 3366 0
 2240              		.cfi_startproc
 2241              		@ args = 0, pretend = 0, frame = 0
 2242              		@ frame_needed = 0, uses_anonymous_args = 0
 2243              	.LBB128:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2244              		.loc 1 3376 0
 2245 0000 134B     		ldr	r3, .L206
 2246 0002 1B68     		ldr	r3, [r3]
 2247 0004 13B3     		cbz	r3, .L204
 2248              	.LBE128:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2249              		.loc 1 3366 0
 2250 0006 10B5     		push	{r4, lr}
 2251              	.LCFI25:
 2252              		.cfi_def_cfa_offset 8
 2253              		.cfi_offset 4, -8
 2254              		.cfi_offset 14, -4
 2255              	.L200:
 2256              	.LBB130:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2257              		.loc 1 3378 0
 2258 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2259              	.LVL184:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2260              		.loc 1 3380 0
 2261 000c 114B     		ldr	r3, .L206+4
 2262 000e 1C68     		ldr	r4, [r3]
 2263              	.LVL185:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2264              		.loc 1 3382 0
 2265 0010 FFF7FEFF 		bl	xTaskResumeAll
 2266              	.LVL186:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2267              		.loc 1 3384 0
 2268 0014 24B9     		cbnz	r4, .L205
 2269              	.LVL187:
 2270              	.L199:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2271              		.loc 1 3376 0
 2272 0016 0E4B     		ldr	r3, .L206
 2273 0018 1B68     		ldr	r3, [r3]
 2274 001a 002B     		cmp	r3, #0
 2275 001c F4D1     		bne	.L200
 2276              	.LBE130:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2277              		.loc 1 3406 0
 2278 001e 10BD     		pop	{r4, pc}
 2279              	.LVL188:
 2280              	.L205:
 2281              	.LBB131:
 2282              	.LBB129:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2283              		.loc 1 3388 0
 2284 0020 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 134


 2285              	.LVL189:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2286              		.loc 1 3390 0
 2287 0024 0B4B     		ldr	r3, .L206+4
 2288 0026 DB68     		ldr	r3, [r3, #12]
 2289 0028 DC68     		ldr	r4, [r3, #12]
 2290              	.LVL190:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2291              		.loc 1 3391 0
 2292 002a 201D     		adds	r0, r4, #4
 2293 002c FFF7FEFF 		bl	uxListRemove
 2294              	.LVL191:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2295              		.loc 1 3392 0
 2296 0030 094A     		ldr	r2, .L206+8
 2297 0032 1368     		ldr	r3, [r2]
 2298 0034 013B     		subs	r3, r3, #1
 2299 0036 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2300              		.loc 1 3393 0
 2301 0038 054A     		ldr	r2, .L206
 2302 003a 1368     		ldr	r3, [r2]
 2303 003c 013B     		subs	r3, r3, #1
 2304 003e 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 3395 0
 2306 0040 FFF7FEFF 		bl	vPortExitCritical
 2307              	.LVL192:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2308              		.loc 1 3397 0
 2309 0044 2046     		mov	r0, r4
 2310 0046 FFF7FEFF 		bl	prvDeleteTCB
 2311              	.LVL193:
 2312              	.LBE129:
 2313 004a E4E7     		b	.L199
 2314              	.LVL194:
 2315              	.L204:
 2316              	.LCFI26:
 2317              		.cfi_def_cfa_offset 0
 2318              		.cfi_restore 4
 2319              		.cfi_restore 14
 2320 004c 7047     		bx	lr
 2321              	.L207:
 2322 004e 00BF     		.align	2
 2323              	.L206:
 2324 0050 00000000 		.word	.LANCHOR15
 2325 0054 00000000 		.word	.LANCHOR7
 2326 0058 00000000 		.word	.LANCHOR9
 2327              	.LBE131:
 2328              		.cfi_endproc
 2329              	.LFE36:
 2331              		.section	.text.prvIdleTask,"ax",%progbits
 2332              		.align	1
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2336              		.fpu fpv5-sp-d16
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 135


 2338              	prvIdleTask:
 2339              	.LFB34:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2340              		.loc 1 3132 0
 2341              		.cfi_startproc
 2342              		@ Volatile: function does not return.
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
 2345              	.LVL195:
 2346 0000 08B5     		push	{r3, lr}
 2347              	.LCFI27:
 2348              		.cfi_def_cfa_offset 8
 2349              		.cfi_offset 3, -8
 2350              		.cfi_offset 14, -4
 2351              	.LVL196:
 2352              	.L209:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2353              		.loc 1 3143 0 discriminator 1
 2354 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2355              	.LVL197:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2356              		.loc 1 3151 0 discriminator 1
 2357 0006 044B     		ldr	r3, .L211
 2358 0008 4FF08052 		mov	r2, #268435456
 2359 000c 1A60     		str	r2, [r3]
 2360              		.syntax unified
 2361              	@ 3151 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2362 000e BFF34F8F 		dsb
 2363              	@ 0 "" 2
 2364              	@ 3151 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2365 0012 BFF36F8F 		isb
 2366              	@ 0 "" 2
 2367              		.thumb
 2368              		.syntax unified
 2369 0016 F4E7     		b	.L209
 2370              	.L212:
 2371              		.align	2
 2372              	.L211:
 2373 0018 04ED00E0 		.word	-536810236
 2374              		.cfi_endproc
 2375              	.LFE34:
 2377              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2378              		.align	1
 2379              		.global	vTaskSwitchContext
 2380              		.syntax unified
 2381              		.thumb
 2382              		.thumb_func
 2383              		.fpu fpv5-sp-d16
 2385              	vTaskSwitchContext:
 2386              	.LFB26:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2387              		.loc 1 2762 0
 2388              		.cfi_startproc
 2389              		@ args = 0, pretend = 0, frame = 0
 2390              		@ frame_needed = 0, uses_anonymous_args = 0
 2391              		@ link register save eliminated.
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 136


 2392              		.loc 1 2763 0
 2393 0000 214B     		ldr	r3, .L223
 2394 0002 1B68     		ldr	r3, [r3]
 2395 0004 1BB1     		cbz	r3, .L214
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2396              		.loc 1 2767 0
 2397 0006 214B     		ldr	r3, .L223+4
 2398 0008 0122     		movs	r2, #1
 2399 000a 1A60     		str	r2, [r3]
 2400 000c 7047     		bx	lr
 2401              	.L214:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2402              		.loc 1 2771 0
 2403 000e 1F4B     		ldr	r3, .L223+4
 2404 0010 0022     		movs	r2, #0
 2405 0012 1A60     		str	r2, [r3]
 2406              	.LBB132:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2407              		.loc 1 2806 0
 2408 0014 1E4B     		ldr	r3, .L223+8
 2409 0016 1B68     		ldr	r3, [r3]
 2410              	.LVL198:
 2411              	.LBB133:
 2412              	.LBB134:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 		return ucReturn;
 2413              		.loc 2 176 0
 2414              		.syntax unified
 2415              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2416 0018 B3FA83F3 		clz r3, r3
 2417              	@ 0 "" 2
 2418              	.LVL199:
 2419              		.thumb
 2420              		.syntax unified
 2421 001c DBB2     		uxtb	r3, r3
 2422              	.LBE134:
 2423              	.LBE133:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2424              		.loc 1 2806 0
 2425 001e C3F11F03 		rsb	r3, r3, #31
 2426              	.LVL200:
 2427 0022 03EB8301 		add	r1, r3, r3, lsl #2
 2428 0026 8A00     		lsls	r2, r1, #2
 2429 0028 1A49     		ldr	r1, .L223+12
 2430 002a 8A58     		ldr	r2, [r1, r2]
 2431 002c 52B9     		cbnz	r2, .L216
 2432              	.LBB135:
 2433              	.LBB136:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2434              		.loc 2 237 0
 2435              		.syntax unified
 2436              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2437 002e 4FF05003 			mov r3, #80												
 2438 0032 72B6     		cpsid i													
 2439 0034 83F31188 		msr basepri, r3											
 2440 0038 BFF36F8F 		isb														
 2441 003c BFF34F8F 		dsb														
 2442 0040 62B6     		cpsie i													
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 137


 2443              	
 2444              	@ 0 "" 2
 2445              	.LVL201:
 2446              		.thumb
 2447              		.syntax unified
 2448              	.L217:
 2449 0042 FEE7     		b	.L217
 2450              	.LVL202:
 2451              	.L216:
 2452              	.LBE136:
 2453              	.LBE135:
 2454              	.LBE132:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2455              		.loc 1 2762 0 discriminator 2
 2456 0044 10B4     		push	{r4}
 2457              	.LCFI28:
 2458              		.cfi_def_cfa_offset 4
 2459              		.cfi_offset 4, -4
 2460              	.LVL203:
 2461              	.LBB139:
 2462              	.LBB137:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2463              		.loc 1 2806 0 discriminator 2
 2464 0046 1348     		ldr	r0, .L223+12
 2465 0048 9A00     		lsls	r2, r3, #2
 2466 004a D418     		adds	r4, r2, r3
 2467 004c A100     		lsls	r1, r4, #2
 2468 004e 0144     		add	r1, r1, r0
 2469 0050 4C68     		ldr	r4, [r1, #4]
 2470 0052 6468     		ldr	r4, [r4, #4]
 2471 0054 4C60     		str	r4, [r1, #4]
 2472 0056 1A44     		add	r2, r2, r3
 2473 0058 9100     		lsls	r1, r2, #2
 2474 005a 0831     		adds	r1, r1, #8
 2475 005c 0844     		add	r0, r0, r1
 2476 005e 8442     		cmp	r4, r0
 2477 0060 0BD0     		beq	.L222
 2478              	.L218:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2479              		.loc 1 2806 0 is_stmt 0 discriminator 5
 2480 0062 03EB8303 		add	r3, r3, r3, lsl #2
 2481              	.LVL204:
 2482 0066 9A00     		lsls	r2, r3, #2
 2483 0068 0A4B     		ldr	r3, .L223+12
 2484 006a 1344     		add	r3, r3, r2
 2485 006c 5B68     		ldr	r3, [r3, #4]
 2486 006e DA68     		ldr	r2, [r3, #12]
 2487 0070 094B     		ldr	r3, .L223+16
 2488 0072 1A60     		str	r2, [r3]
 2489              	.LBE137:
 2490              	.LBE139:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2491              		.loc 1 2817 0 is_stmt 1 discriminator 5
 2492 0074 5DF8044B 		ldr	r4, [sp], #4
 2493              	.LCFI29:
 2494              		.cfi_remember_state
 2495              		.cfi_restore 4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 138


 2496              		.cfi_def_cfa_offset 0
 2497 0078 7047     		bx	lr
 2498              	.LVL205:
 2499              	.L222:
 2500              	.LCFI30:
 2501              		.cfi_restore_state
 2502              	.LBB140:
 2503              	.LBB138:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2504              		.loc 1 2806 0 discriminator 3
 2505 007a 6168     		ldr	r1, [r4, #4]
 2506 007c 0548     		ldr	r0, .L223+12
 2507 007e 1422     		movs	r2, #20
 2508 0080 02FB0302 		mla	r2, r2, r3, r0
 2509 0084 5160     		str	r1, [r2, #4]
 2510 0086 ECE7     		b	.L218
 2511              	.L224:
 2512              		.align	2
 2513              	.L223:
 2514 0088 00000000 		.word	.LANCHOR16
 2515 008c 00000000 		.word	.LANCHOR20
 2516 0090 00000000 		.word	.LANCHOR13
 2517 0094 00000000 		.word	.LANCHOR4
 2518 0098 00000000 		.word	.LANCHOR10
 2519              	.LBE138:
 2520              	.LBE140:
 2521              		.cfi_endproc
 2522              	.LFE26:
 2524              		.section	.text.vTaskSuspend,"ax",%progbits
 2525              		.align	1
 2526              		.global	vTaskSuspend
 2527              		.syntax unified
 2528              		.thumb
 2529              		.thumb_func
 2530              		.fpu fpv5-sp-d16
 2532              	vTaskSuspend:
 2533              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2534              		.loc 1 1567 0
 2535              		.cfi_startproc
 2536              		@ args = 0, pretend = 0, frame = 0
 2537              		@ frame_needed = 0, uses_anonymous_args = 0
 2538              	.LVL206:
 2539 0000 38B5     		push	{r3, r4, r5, lr}
 2540              	.LCFI31:
 2541              		.cfi_def_cfa_offset 16
 2542              		.cfi_offset 3, -16
 2543              		.cfi_offset 4, -12
 2544              		.cfi_offset 5, -8
 2545              		.cfi_offset 14, -4
 2546 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2547              		.loc 1 1570 0
 2548 0004 FFF7FEFF 		bl	vPortEnterCritical
 2549              	.LVL207:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2550              		.loc 1 1574 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 139


 2551 0008 3CB3     		cbz	r4, .L236
 2552              	.LVL208:
 2553              	.L226:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2554              		.loc 1 1580 0 discriminator 4
 2555 000a 251D     		adds	r5, r4, #4
 2556 000c 2846     		mov	r0, r5
 2557 000e FFF7FEFF 		bl	uxListRemove
 2558              	.LVL209:
 2559 0012 70B9     		cbnz	r0, .L227
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2560              		.loc 1 1582 0
 2561 0014 E26A     		ldr	r2, [r4, #44]
 2562 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2563 001a 8B00     		lsls	r3, r1, #2
 2564 001c 2749     		ldr	r1, .L239
 2565 001e CB58     		ldr	r3, [r1, r3]
 2566 0020 3BB9     		cbnz	r3, .L227
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2567              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2568 0022 0123     		movs	r3, #1
 2569 0024 03FA02F2 		lsl	r2, r3, r2
 2570 0028 2549     		ldr	r1, .L239+4
 2571 002a 0B68     		ldr	r3, [r1]
 2572 002c 23EA0203 		bic	r3, r3, r2
 2573 0030 0B60     		str	r3, [r1]
 2574              	.L227:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2575              		.loc 1 1590 0 is_stmt 1
 2576 0032 A36A     		ldr	r3, [r4, #40]
 2577 0034 1BB1     		cbz	r3, .L228
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2578              		.loc 1 1592 0
 2579 0036 04F11800 		add	r0, r4, #24
 2580 003a FFF7FEFF 		bl	uxListRemove
 2581              	.LVL210:
 2582              	.L228:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2583              		.loc 1 1599 0
 2584 003e 2946     		mov	r1, r5
 2585 0040 2048     		ldr	r0, .L239+8
 2586 0042 FFF7FEFF 		bl	vListInsertEnd
 2587              	.LVL211:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2588              		.loc 1 1601 0
 2589 0046 FFF7FEFF 		bl	vPortExitCritical
 2590              	.LVL212:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2591              		.loc 1 1603 0
 2592 004a 1F4B     		ldr	r3, .L239+12
 2593 004c 1B68     		ldr	r3, [r3]
 2594 004e 3BB9     		cbnz	r3, .L237
 2595              	.L229:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2596              		.loc 1 1618 0
 2597 0050 1E4B     		ldr	r3, .L239+16
 2598 0052 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 140


 2599 0054 A342     		cmp	r3, r4
 2600 0056 0AD0     		beq	.L238
 2601              	.L225:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2602              		.loc 1 1649 0
 2603 0058 38BD     		pop	{r3, r4, r5, pc}
 2604              	.LVL213:
 2605              	.L236:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2606              		.loc 1 1574 0 discriminator 1
 2607 005a 1C4B     		ldr	r3, .L239+16
 2608 005c 1C68     		ldr	r4, [r3]
 2609              	.LVL214:
 2610 005e D4E7     		b	.L226
 2611              	.LVL215:
 2612              	.L237:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2613              		.loc 1 1607 0
 2614 0060 FFF7FEFF 		bl	vPortEnterCritical
 2615              	.LVL216:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2616              		.loc 1 1609 0
 2617 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2618              	.LVL217:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2619              		.loc 1 1611 0
 2620 0068 FFF7FEFF 		bl	vPortExitCritical
 2621              	.LVL218:
 2622 006c F0E7     		b	.L229
 2623              	.L238:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2624              		.loc 1 1620 0
 2625 006e 164B     		ldr	r3, .L239+12
 2626 0070 1B68     		ldr	r3, [r3]
 2627 0072 B3B1     		cbz	r3, .L231
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2628              		.loc 1 1623 0
 2629 0074 164B     		ldr	r3, .L239+20
 2630 0076 1B68     		ldr	r3, [r3]
 2631 0078 53B1     		cbz	r3, .L232
 2632              	.LBB141:
 2633              	.LBB142:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2634              		.loc 2 237 0
 2635              		.syntax unified
 2636              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2637 007a 4FF05003 			mov r3, #80												
 2638 007e 72B6     		cpsid i													
 2639 0080 83F31188 		msr basepri, r3											
 2640 0084 BFF36F8F 		isb														
 2641 0088 BFF34F8F 		dsb														
 2642 008c 62B6     		cpsie i													
 2643              	
 2644              	@ 0 "" 2
 2645              	.LVL219:
 2646              		.thumb
 2647              		.syntax unified
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 141


 2648              	.L233:
 2649 008e FEE7     		b	.L233
 2650              	.L232:
 2651              	.LBE142:
 2652              	.LBE141:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2653              		.loc 1 1624 0
 2654 0090 104B     		ldr	r3, .L239+24
 2655 0092 4FF08052 		mov	r2, #268435456
 2656 0096 1A60     		str	r2, [r3]
 2657              		.syntax unified
 2658              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2659 0098 BFF34F8F 		dsb
 2660              	@ 0 "" 2
 2661              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2662 009c BFF36F8F 		isb
 2663              	@ 0 "" 2
 2664              		.thumb
 2665              		.syntax unified
 2666 00a0 DAE7     		b	.L225
 2667              	.L231:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2668              		.loc 1 1631 0
 2669 00a2 084B     		ldr	r3, .L239+8
 2670 00a4 1A68     		ldr	r2, [r3]
 2671 00a6 0C4B     		ldr	r3, .L239+28
 2672 00a8 1B68     		ldr	r3, [r3]
 2673 00aa 9A42     		cmp	r2, r3
 2674 00ac 03D1     		bne	.L234
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2675              		.loc 1 1637 0
 2676 00ae 074B     		ldr	r3, .L239+16
 2677 00b0 0022     		movs	r2, #0
 2678 00b2 1A60     		str	r2, [r3]
 2679 00b4 D0E7     		b	.L225
 2680              	.L234:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2681              		.loc 1 1641 0
 2682 00b6 FFF7FEFF 		bl	vTaskSwitchContext
 2683              	.LVL220:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2684              		.loc 1 1649 0
 2685 00ba CDE7     		b	.L225
 2686              	.L240:
 2687              		.align	2
 2688              	.L239:
 2689 00bc 00000000 		.word	.LANCHOR4
 2690 00c0 00000000 		.word	.LANCHOR13
 2691 00c4 00000000 		.word	.LANCHOR0
 2692 00c8 00000000 		.word	.LANCHOR11
 2693 00cc 00000000 		.word	.LANCHOR10
 2694 00d0 00000000 		.word	.LANCHOR16
 2695 00d4 04ED00E0 		.word	-536810236
 2696 00d8 00000000 		.word	.LANCHOR9
 2697              		.cfi_endproc
 2698              	.LFE13:
 2700              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 142


 2701              		.align	1
 2702              		.global	vTaskPlaceOnEventList
 2703              		.syntax unified
 2704              		.thumb
 2705              		.thumb_func
 2706              		.fpu fpv5-sp-d16
 2708              	vTaskPlaceOnEventList:
 2709              	.LFB27:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2710              		.loc 1 2821 0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 0
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 2714              	.LVL221:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2715              		.loc 1 2822 0
 2716 0000 50B9     		cbnz	r0, .L242
 2717              	.LBB143:
 2718              	.LBB144:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2719              		.loc 2 237 0
 2720              		.syntax unified
 2721              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2722 0002 4FF05003 			mov r3, #80												
 2723 0006 72B6     		cpsid i													
 2724 0008 83F31188 		msr basepri, r3											
 2725 000c BFF36F8F 		isb														
 2726 0010 BFF34F8F 		dsb														
 2727 0014 62B6     		cpsie i													
 2728              	
 2729              	@ 0 "" 2
 2730              	.LVL222:
 2731              		.thumb
 2732              		.syntax unified
 2733              	.L243:
 2734 0016 FEE7     		b	.L243
 2735              	.L242:
 2736              	.LBE144:
 2737              	.LBE143:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2738              		.loc 1 2821 0
 2739 0018 10B5     		push	{r4, lr}
 2740              	.LCFI32:
 2741              		.cfi_def_cfa_offset 8
 2742              		.cfi_offset 4, -8
 2743              		.cfi_offset 14, -4
 2744 001a 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2745              		.loc 1 2831 0
 2746 001c 044B     		ldr	r3, .L246
 2747 001e 1968     		ldr	r1, [r3]
 2748              	.LVL223:
 2749 0020 1831     		adds	r1, r1, #24
 2750 0022 FFF7FEFF 		bl	vListInsert
 2751              	.LVL224:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2752              		.loc 1 2833 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 143


 2753 0026 0121     		movs	r1, #1
 2754 0028 2046     		mov	r0, r4
 2755 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2756              	.LVL225:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2757              		.loc 1 2834 0
 2758 002e 10BD     		pop	{r4, pc}
 2759              	.LVL226:
 2760              	.L247:
 2761              		.align	2
 2762              	.L246:
 2763 0030 00000000 		.word	.LANCHOR10
 2764              		.cfi_endproc
 2765              	.LFE27:
 2767              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2768              		.align	1
 2769              		.global	vTaskPlaceOnUnorderedEventList
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu fpv5-sp-d16
 2775              	vTaskPlaceOnUnorderedEventList:
 2776              	.LFB28:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2777              		.loc 1 2838 0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 0
 2780              		@ frame_needed = 0, uses_anonymous_args = 0
 2781              	.LVL227:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2782              		.loc 1 2839 0
 2783 0000 50B9     		cbnz	r0, .L249
 2784              	.LBB145:
 2785              	.LBB146:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2786              		.loc 2 237 0
 2787              		.syntax unified
 2788              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2789 0002 4FF05003 			mov r3, #80												
 2790 0006 72B6     		cpsid i													
 2791 0008 83F31188 		msr basepri, r3											
 2792 000c BFF36F8F 		isb														
 2793 0010 BFF34F8F 		dsb														
 2794 0014 62B6     		cpsie i													
 2795              	
 2796              	@ 0 "" 2
 2797              	.LVL228:
 2798              		.thumb
 2799              		.syntax unified
 2800              	.L250:
 2801 0016 FEE7     		b	.L250
 2802              	.L249:
 2803 0018 0346     		mov	r3, r0
 2804              	.LBE146:
 2805              	.LBE145:
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2806              		.loc 1 2843 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 144


 2807 001a 1048     		ldr	r0, .L255
 2808              	.LVL229:
 2809 001c 0068     		ldr	r0, [r0]
 2810 001e 50B9     		cbnz	r0, .L251
 2811              	.LBB147:
 2812              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2813              		.loc 2 237 0
 2814              		.syntax unified
 2815              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2816 0020 4FF05003 			mov r3, #80												
 2817 0024 72B6     		cpsid i													
 2818 0026 83F31188 		msr basepri, r3											
 2819 002a BFF36F8F 		isb														
 2820 002e BFF34F8F 		dsb														
 2821 0032 62B6     		cpsie i													
 2822              	
 2823              	@ 0 "" 2
 2824              	.LVL230:
 2825              		.thumb
 2826              		.syntax unified
 2827              	.L252:
 2828 0034 FEE7     		b	.L252
 2829              	.LVL231:
 2830              	.L251:
 2831              	.LBE148:
 2832              	.LBE147:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2833              		.loc 1 2838 0
 2834 0036 10B5     		push	{r4, lr}
 2835              	.LCFI33:
 2836              		.cfi_def_cfa_offset 8
 2837              		.cfi_offset 4, -8
 2838              		.cfi_offset 14, -4
 2839 0038 1846     		mov	r0, r3
 2840 003a 1446     		mov	r4, r2
 2841 003c 0B46     		mov	r3, r1
 2842              	.LVL232:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2843              		.loc 1 2848 0
 2844 003e 084A     		ldr	r2, .L255+4
 2845              	.LVL233:
 2846 0040 1168     		ldr	r1, [r2]
 2847              	.LVL234:
 2848 0042 43F00043 		orr	r3, r3, #-2147483648
 2849              	.LVL235:
 2850 0046 8B61     		str	r3, [r1, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2851              		.loc 1 2855 0
 2852 0048 1168     		ldr	r1, [r2]
 2853 004a 1831     		adds	r1, r1, #24
 2854 004c FFF7FEFF 		bl	vListInsertEnd
 2855              	.LVL236:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2856              		.loc 1 2857 0
 2857 0050 0121     		movs	r1, #1
 2858 0052 2046     		mov	r0, r4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 145


 2859 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2860              	.LVL237:
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2861              		.loc 1 2858 0
 2862 0058 10BD     		pop	{r4, pc}
 2863              	.LVL238:
 2864              	.L256:
 2865 005a 00BF     		.align	2
 2866              	.L255:
 2867 005c 00000000 		.word	.LANCHOR16
 2868 0060 00000000 		.word	.LANCHOR10
 2869              		.cfi_endproc
 2870              	.LFE28:
 2872              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2873              		.align	1
 2874              		.global	xTaskRemoveFromEventList
 2875              		.syntax unified
 2876              		.thumb
 2877              		.thumb_func
 2878              		.fpu fpv5-sp-d16
 2880              	xTaskRemoveFromEventList:
 2881              	.LFB29:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2882              		.loc 1 2895 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
 2886              	.LVL239:
 2887 0000 38B5     		push	{r3, r4, r5, lr}
 2888              	.LCFI34:
 2889              		.cfi_def_cfa_offset 16
 2890              		.cfi_offset 3, -16
 2891              		.cfi_offset 4, -12
 2892              		.cfi_offset 5, -8
 2893              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2894              		.loc 1 2912 0
 2895 0002 C368     		ldr	r3, [r0, #12]
 2896 0004 DC68     		ldr	r4, [r3, #12]
 2897              	.LVL240:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2898              		.loc 1 2913 0
 2899 0006 54B9     		cbnz	r4, .L258
 2900              	.LBB149:
 2901              	.LBB150:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 2902              		.loc 2 237 0
 2903              		.syntax unified
 2904              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2905 0008 4FF05003 			mov r3, #80												
 2906 000c 72B6     		cpsid i													
 2907 000e 83F31188 		msr basepri, r3											
 2908 0012 BFF36F8F 		isb														
 2909 0016 BFF34F8F 		dsb														
 2910 001a 62B6     		cpsie i													
 2911              	
 2912              	@ 0 "" 2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 146


 2913              	.LVL241:
 2914              		.thumb
 2915              		.syntax unified
 2916              	.L259:
 2917 001c FEE7     		b	.L259
 2918              	.L258:
 2919              	.LBE150:
 2920              	.LBE149:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2921              		.loc 1 2914 0
 2922 001e 04F11805 		add	r5, r4, #24
 2923 0022 2846     		mov	r0, r5
 2924              	.LVL242:
 2925 0024 FFF7FEFF 		bl	uxListRemove
 2926              	.LVL243:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2927              		.loc 1 2916 0
 2928 0028 134B     		ldr	r3, .L265
 2929 002a 1B68     		ldr	r3, [r3]
 2930 002c E3B9     		cbnz	r3, .L260
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2931              		.loc 1 2918 0
 2932 002e 251D     		adds	r5, r4, #4
 2933 0030 2846     		mov	r0, r5
 2934 0032 FFF7FEFF 		bl	uxListRemove
 2935              	.LVL244:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2936              		.loc 1 2919 0
 2937 0036 E36A     		ldr	r3, [r4, #44]
 2938 0038 0122     		movs	r2, #1
 2939 003a 9A40     		lsls	r2, r2, r3
 2940 003c 0F49     		ldr	r1, .L265+4
 2941 003e 0868     		ldr	r0, [r1]
 2942 0040 0243     		orrs	r2, r2, r0
 2943 0042 0A60     		str	r2, [r1]
 2944 0044 03EB8303 		add	r3, r3, r3, lsl #2
 2945 0048 9A00     		lsls	r2, r3, #2
 2946 004a 2946     		mov	r1, r5
 2947 004c 0C48     		ldr	r0, .L265+8
 2948 004e 1044     		add	r0, r0, r2
 2949 0050 FFF7FEFF 		bl	vListInsertEnd
 2950              	.LVL245:
 2951              	.L261:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2952              		.loc 1 2928 0
 2953 0054 E26A     		ldr	r2, [r4, #44]
 2954 0056 0B4B     		ldr	r3, .L265+12
 2955 0058 1B68     		ldr	r3, [r3]
 2956 005a DB6A     		ldr	r3, [r3, #44]
 2957 005c 9A42     		cmp	r2, r3
 2958 005e 08D9     		bls	.L263
 2959              	.LVL246:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2960              		.loc 1 2937 0
 2961 0060 0120     		movs	r0, #1
 2962 0062 094B     		ldr	r3, .L265+16
 2963 0064 1860     		str	r0, [r3]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 147


 2964              	.LVL247:
 2965              	.L257:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2966              		.loc 1 2959 0
 2967 0066 38BD     		pop	{r3, r4, r5, pc}
 2968              	.LVL248:
 2969              	.L260:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2970              		.loc 1 2925 0
 2971 0068 2946     		mov	r1, r5
 2972 006a 0848     		ldr	r0, .L265+20
 2973 006c FFF7FEFF 		bl	vListInsertEnd
 2974              	.LVL249:
 2975 0070 F0E7     		b	.L261
 2976              	.L263:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2977              		.loc 1 2941 0
 2978 0072 0020     		movs	r0, #0
 2979              	.LVL250:
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2980              		.loc 1 2958 0
 2981 0074 F7E7     		b	.L257
 2982              	.L266:
 2983 0076 00BF     		.align	2
 2984              	.L265:
 2985 0078 00000000 		.word	.LANCHOR16
 2986 007c 00000000 		.word	.LANCHOR13
 2987 0080 00000000 		.word	.LANCHOR4
 2988 0084 00000000 		.word	.LANCHOR10
 2989 0088 00000000 		.word	.LANCHOR20
 2990 008c 00000000 		.word	.LANCHOR1
 2991              		.cfi_endproc
 2992              	.LFE29:
 2994              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2995              		.align	1
 2996              		.global	xTaskRemoveFromUnorderedEventList
 2997              		.syntax unified
 2998              		.thumb
 2999              		.thumb_func
 3000              		.fpu fpv5-sp-d16
 3002              	xTaskRemoveFromUnorderedEventList:
 3003              	.LFB30:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3004              		.loc 1 2963 0
 3005              		.cfi_startproc
 3006              		@ args = 0, pretend = 0, frame = 0
 3007              		@ frame_needed = 0, uses_anonymous_args = 0
 3008              	.LVL251:
 3009 0000 38B5     		push	{r3, r4, r5, lr}
 3010              	.LCFI35:
 3011              		.cfi_def_cfa_offset 16
 3012              		.cfi_offset 3, -16
 3013              		.cfi_offset 4, -12
 3014              		.cfi_offset 5, -8
 3015              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3016              		.loc 1 2969 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 148


 3017 0002 1F4B     		ldr	r3, .L276
 3018 0004 1B68     		ldr	r3, [r3]
 3019 0006 53B9     		cbnz	r3, .L268
 3020              	.LBB151:
 3021              	.LBB152:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3022              		.loc 2 237 0
 3023              		.syntax unified
 3024              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3025 0008 4FF05003 			mov r3, #80												
 3026 000c 72B6     		cpsid i													
 3027 000e 83F31188 		msr basepri, r3											
 3028 0012 BFF36F8F 		isb														
 3029 0016 BFF34F8F 		dsb														
 3030 001a 62B6     		cpsie i													
 3031              	
 3032              	@ 0 "" 2
 3033              	.LVL252:
 3034              		.thumb
 3035              		.syntax unified
 3036              	.L269:
 3037 001c FEE7     		b	.L269
 3038              	.L268:
 3039              	.LBE152:
 3040              	.LBE151:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3041              		.loc 1 2972 0
 3042 001e 41F00041 		orr	r1, r1, #-2147483648
 3043              	.LVL253:
 3044 0022 0160     		str	r1, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3045              		.loc 1 2976 0
 3046 0024 C468     		ldr	r4, [r0, #12]
 3047              	.LVL254:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3048              		.loc 1 2977 0
 3049 0026 F4B1     		cbz	r4, .L275
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3050              		.loc 1 2978 0
 3051 0028 FFF7FEFF 		bl	uxListRemove
 3052              	.LVL255:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3053              		.loc 1 2983 0
 3054 002c 251D     		adds	r5, r4, #4
 3055 002e 2846     		mov	r0, r5
 3056 0030 FFF7FEFF 		bl	uxListRemove
 3057              	.LVL256:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3058              		.loc 1 2984 0
 3059 0034 E36A     		ldr	r3, [r4, #44]
 3060 0036 0122     		movs	r2, #1
 3061 0038 9A40     		lsls	r2, r2, r3
 3062 003a 1249     		ldr	r1, .L276+4
 3063 003c 0868     		ldr	r0, [r1]
 3064 003e 0243     		orrs	r2, r2, r0
 3065 0040 0A60     		str	r2, [r1]
 3066 0042 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 149


 3067 0046 9A00     		lsls	r2, r3, #2
 3068 0048 2946     		mov	r1, r5
 3069 004a 0F48     		ldr	r0, .L276+8
 3070 004c 1044     		add	r0, r0, r2
 3071 004e FFF7FEFF 		bl	vListInsertEnd
 3072              	.LVL257:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3073              		.loc 1 2986 0
 3074 0052 E26A     		ldr	r2, [r4, #44]
 3075 0054 0D4B     		ldr	r3, .L276+12
 3076 0056 1B68     		ldr	r3, [r3]
 3077 0058 DB6A     		ldr	r3, [r3, #44]
 3078 005a 9A42     		cmp	r2, r3
 3079 005c 0ED9     		bls	.L273
 3080              	.LVL258:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3081              		.loc 1 2996 0
 3082 005e 0120     		movs	r0, #1
 3083 0060 0B4B     		ldr	r3, .L276+16
 3084 0062 1860     		str	r0, [r3]
 3085              	.LVL259:
 3086              	.L267:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3087              		.loc 1 3004 0
 3088 0064 38BD     		pop	{r3, r4, r5, pc}
 3089              	.LVL260:
 3090              	.L275:
 3091              	.LBB153:
 3092              	.LBB154:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3093              		.loc 2 237 0
 3094              		.syntax unified
 3095              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3096 0066 4FF05003 			mov r3, #80												
 3097 006a 72B6     		cpsid i													
 3098 006c 83F31188 		msr basepri, r3											
 3099 0070 BFF36F8F 		isb														
 3100 0074 BFF34F8F 		dsb														
 3101 0078 62B6     		cpsie i													
 3102              	
 3103              	@ 0 "" 2
 3104              	.LVL261:
 3105              		.thumb
 3106              		.syntax unified
 3107              	.L271:
 3108 007a FEE7     		b	.L271
 3109              	.LVL262:
 3110              	.L273:
 3111              	.LBE154:
 3112              	.LBE153:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3113              		.loc 1 3000 0
 3114 007c 0020     		movs	r0, #0
 3115              	.LVL263:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3116              		.loc 1 3003 0
 3117 007e F1E7     		b	.L267
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 150


 3118              	.L277:
 3119              		.align	2
 3120              	.L276:
 3121 0080 00000000 		.word	.LANCHOR16
 3122 0084 00000000 		.word	.LANCHOR13
 3123 0088 00000000 		.word	.LANCHOR4
 3124 008c 00000000 		.word	.LANCHOR10
 3125 0090 00000000 		.word	.LANCHOR20
 3126              		.cfi_endproc
 3127              	.LFE30:
 3129              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3130              		.align	1
 3131              		.global	vTaskSetTimeOutState
 3132              		.syntax unified
 3133              		.thumb
 3134              		.thumb_func
 3135              		.fpu fpv5-sp-d16
 3137              	vTaskSetTimeOutState:
 3138              	.LFB31:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3139              		.loc 1 3008 0
 3140              		.cfi_startproc
 3141              		@ args = 0, pretend = 0, frame = 0
 3142              		@ frame_needed = 0, uses_anonymous_args = 0
 3143              		@ link register save eliminated.
 3144              	.LVL264:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3145              		.loc 1 3009 0
 3146 0000 30B1     		cbz	r0, .L281
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3147              		.loc 1 3010 0
 3148 0002 094A     		ldr	r2, .L282
 3149 0004 1268     		ldr	r2, [r2]
 3150 0006 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3151              		.loc 1 3011 0
 3152 0008 084A     		ldr	r2, .L282+4
 3153 000a 1268     		ldr	r2, [r2]
 3154 000c 4260     		str	r2, [r0, #4]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3155              		.loc 1 3012 0
 3156 000e 7047     		bx	lr
 3157              	.L281:
 3158              	.LBB155:
 3159              	.LBB156:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3160              		.loc 2 237 0
 3161              		.syntax unified
 3162              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3163 0010 4FF05003 			mov r3, #80												
 3164 0014 72B6     		cpsid i													
 3165 0016 83F31188 		msr basepri, r3											
 3166 001a BFF36F8F 		isb														
 3167 001e BFF34F8F 		dsb														
 3168 0022 62B6     		cpsie i													
 3169              	
 3170              	@ 0 "" 2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 151


 3171              	.LVL265:
 3172              		.thumb
 3173              		.syntax unified
 3174              	.L280:
 3175 0024 FEE7     		b	.L280
 3176              	.L283:
 3177 0026 00BF     		.align	2
 3178              	.L282:
 3179 0028 00000000 		.word	.LANCHOR18
 3180 002c 00000000 		.word	.LANCHOR14
 3181              	.LBE156:
 3182              	.LBE155:
 3183              		.cfi_endproc
 3184              	.LFE31:
 3186              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3187              		.align	1
 3188              		.global	xTaskCheckForTimeOut
 3189              		.syntax unified
 3190              		.thumb
 3191              		.thumb_func
 3192              		.fpu fpv5-sp-d16
 3194              	xTaskCheckForTimeOut:
 3195              	.LFB32:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3196              		.loc 1 3016 0
 3197              		.cfi_startproc
 3198              		@ args = 0, pretend = 0, frame = 0
 3199              		@ frame_needed = 0, uses_anonymous_args = 0
 3200              	.LVL266:
 3201 0000 38B5     		push	{r3, r4, r5, lr}
 3202              	.LCFI36:
 3203              		.cfi_def_cfa_offset 16
 3204              		.cfi_offset 3, -16
 3205              		.cfi_offset 4, -12
 3206              		.cfi_offset 5, -8
 3207              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3208              		.loc 1 3019 0
 3209 0002 60B1     		cbz	r0, .L295
 3210 0004 0446     		mov	r4, r0
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3211              		.loc 1 3020 0
 3212 0006 A9B9     		cbnz	r1, .L287
 3213              	.LBB157:
 3214              	.LBB158:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3215              		.loc 2 237 0
 3216              		.syntax unified
 3217              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3218 0008 4FF05003 			mov r3, #80												
 3219 000c 72B6     		cpsid i													
 3220 000e 83F31188 		msr basepri, r3											
 3221 0012 BFF36F8F 		isb														
 3222 0016 BFF34F8F 		dsb														
 3223 001a 62B6     		cpsie i													
 3224              	
 3225              	@ 0 "" 2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 152


 3226              	.LVL267:
 3227              		.thumb
 3228              		.syntax unified
 3229              	.L288:
 3230 001c FEE7     		b	.L288
 3231              	.L295:
 3232              	.LBE158:
 3233              	.LBE157:
 3234              	.LBB159:
 3235              	.LBB160:
 3236              		.syntax unified
 3237              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3238 001e 4FF05003 			mov r3, #80												
 3239 0022 72B6     		cpsid i													
 3240 0024 83F31188 		msr basepri, r3											
 3241 0028 BFF36F8F 		isb														
 3242 002c BFF34F8F 		dsb														
 3243 0030 62B6     		cpsie i													
 3244              	
 3245              	@ 0 "" 2
 3246              	.LVL268:
 3247              		.thumb
 3248              		.syntax unified
 3249              	.L286:
 3250 0032 FEE7     		b	.L286
 3251              	.L287:
 3252 0034 0D46     		mov	r5, r1
 3253              	.LBE160:
 3254              	.LBE159:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3255              		.loc 1 3022 0
 3256 0036 FFF7FEFF 		bl	vPortEnterCritical
 3257              	.LVL269:
 3258              	.LBB161:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3259              		.loc 1 3025 0
 3260 003a 114B     		ldr	r3, .L297
 3261 003c 1968     		ldr	r1, [r3]
 3262              	.LVL270:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3263              		.loc 1 3039 0
 3264 003e 2B68     		ldr	r3, [r5]
 3265 0040 B3F1FF3F 		cmp	r3, #-1
 3266 0044 18D0     		beq	.L291
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3267              		.loc 1 3049 0
 3268 0046 2068     		ldr	r0, [r4]
 3269 0048 0E4A     		ldr	r2, .L297+4
 3270 004a 1268     		ldr	r2, [r2]
 3271 004c 9042     		cmp	r0, r2
 3272 004e 02D0     		beq	.L290
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3273              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3274 0050 6268     		ldr	r2, [r4, #4]
 3275 0052 8A42     		cmp	r2, r1
 3276 0054 12D9     		bls	.L292
 3277              	.L290:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 153


3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3278              		.loc 1 3058 0 is_stmt 1
 3279 0056 6268     		ldr	r2, [r4, #4]
 3280 0058 881A     		subs	r0, r1, r2
 3281 005a 8342     		cmp	r3, r0
 3282 005c 04D8     		bhi	.L296
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3283              		.loc 1 3067 0
 3284 005e 0124     		movs	r4, #1
 3285              	.LVL271:
 3286              	.L289:
 3287              	.LBE161:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3288              		.loc 1 3070 0
 3289 0060 FFF7FEFF 		bl	vPortExitCritical
 3290              	.LVL272:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3291              		.loc 1 3073 0
 3292 0064 2046     		mov	r0, r4
 3293 0066 38BD     		pop	{r3, r4, r5, pc}
 3294              	.LVL273:
 3295              	.L296:
 3296              	.LBB162:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3297              		.loc 1 3061 0
 3298 0068 521A     		subs	r2, r2, r1
 3299 006a 1344     		add	r3, r3, r2
 3300 006c 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3301              		.loc 1 3062 0
 3302 006e 2046     		mov	r0, r4
 3303 0070 FFF7FEFF 		bl	vTaskSetTimeOutState
 3304              	.LVL274:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3305              		.loc 1 3063 0
 3306 0074 0024     		movs	r4, #0
 3307              	.LVL275:
 3308 0076 F3E7     		b	.L289
 3309              	.LVL276:
 3310              	.L291:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3311              		.loc 1 3044 0
 3312 0078 0024     		movs	r4, #0
 3313              	.LVL277:
 3314 007a F1E7     		b	.L289
 3315              	.LVL278:
 3316              	.L292:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3317              		.loc 1 3056 0
 3318 007c 0124     		movs	r4, #1
 3319              	.LVL279:
 3320 007e EFE7     		b	.L289
 3321              	.L298:
 3322              		.align	2
 3323              	.L297:
 3324 0080 00000000 		.word	.LANCHOR14
 3325 0084 00000000 		.word	.LANCHOR18
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 154


 3326              	.LBE162:
 3327              		.cfi_endproc
 3328              	.LFE32:
 3330              		.section	.text.vTaskMissedYield,"ax",%progbits
 3331              		.align	1
 3332              		.global	vTaskMissedYield
 3333              		.syntax unified
 3334              		.thumb
 3335              		.thumb_func
 3336              		.fpu fpv5-sp-d16
 3338              	vTaskMissedYield:
 3339              	.LFB33:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3340              		.loc 1 3077 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3345              		.loc 1 3078 0
 3346 0000 014B     		ldr	r3, .L300
 3347 0002 0122     		movs	r2, #1
 3348 0004 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3349              		.loc 1 3079 0
 3350 0006 7047     		bx	lr
 3351              	.L301:
 3352              		.align	2
 3353              	.L300:
 3354 0008 00000000 		.word	.LANCHOR20
 3355              		.cfi_endproc
 3356              	.LFE33:
 3358              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3359              		.align	1
 3360              		.global	xTaskGetCurrentTaskHandle
 3361              		.syntax unified
 3362              		.thumb
 3363              		.thumb_func
 3364              		.fpu fpv5-sp-d16
 3366              	xTaskGetCurrentTaskHandle:
 3367              	.LFB39:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3368              		.loc 1 3662 0
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 0
 3371              		@ frame_needed = 0, uses_anonymous_args = 0
 3372              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3373              		.loc 1 3668 0
 3374 0000 014B     		ldr	r3, .L303
 3375 0002 1868     		ldr	r0, [r3]
 3376              	.LVL280:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3377              		.loc 1 3671 0
 3378 0004 7047     		bx	lr
 3379              	.L304:
 3380 0006 00BF     		.align	2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 155


 3381              	.L303:
 3382 0008 00000000 		.word	.LANCHOR10
 3383              		.cfi_endproc
 3384              	.LFE39:
 3386              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3387              		.align	1
 3388              		.global	xTaskGetSchedulerState
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv5-sp-d16
 3394              	xTaskGetSchedulerState:
 3395              	.LFB40:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3396              		.loc 1 3679 0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
 3400              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3401              		.loc 1 3682 0
 3402 0000 054B     		ldr	r3, .L310
 3403 0002 1B68     		ldr	r3, [r3]
 3404 0004 33B1     		cbz	r3, .L307
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3405              		.loc 1 3688 0
 3406 0006 054B     		ldr	r3, .L310+4
 3407 0008 1B68     		ldr	r3, [r3]
 3408 000a 0BB1     		cbz	r3, .L309
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3409              		.loc 1 3694 0
 3410 000c 0020     		movs	r0, #0
 3411              	.LVL281:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3412              		.loc 1 3699 0
 3413 000e 7047     		bx	lr
 3414              	.LVL282:
 3415              	.L309:
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3416              		.loc 1 3690 0
 3417 0010 0220     		movs	r0, #2
 3418 0012 7047     		bx	lr
 3419              	.L307:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3420              		.loc 1 3684 0
 3421 0014 0120     		movs	r0, #1
 3422 0016 7047     		bx	lr
 3423              	.L311:
 3424              		.align	2
 3425              	.L310:
 3426 0018 00000000 		.word	.LANCHOR11
 3427 001c 00000000 		.word	.LANCHOR16
 3428              		.cfi_endproc
 3429              	.LFE40:
 3431              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3432              		.align	1
 3433              		.global	vTaskPriorityInherit
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 156


 3434              		.syntax unified
 3435              		.thumb
 3436              		.thumb_func
 3437              		.fpu fpv5-sp-d16
 3439              	vTaskPriorityInherit:
 3440              	.LFB41:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3441              		.loc 1 3707 0
 3442              		.cfi_startproc
 3443              		@ args = 0, pretend = 0, frame = 0
 3444              		@ frame_needed = 0, uses_anonymous_args = 0
 3445              	.LVL283:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3446              		.loc 1 3712 0
 3447 0000 0028     		cmp	r0, #0
 3448 0002 45D0     		beq	.L319
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3449              		.loc 1 3707 0
 3450 0004 38B5     		push	{r3, r4, r5, lr}
 3451              	.LCFI37:
 3452              		.cfi_def_cfa_offset 16
 3453              		.cfi_offset 3, -16
 3454              		.cfi_offset 4, -12
 3455              		.cfi_offset 5, -8
 3456              		.cfi_offset 14, -4
 3457 0006 0446     		mov	r4, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3458              		.loc 1 3717 0
 3459 0008 C26A     		ldr	r2, [r0, #44]
 3460 000a 2249     		ldr	r1, .L323
 3461 000c 0968     		ldr	r1, [r1]
 3462 000e C96A     		ldr	r1, [r1, #44]
 3463 0010 8A42     		cmp	r2, r1
 3464 0012 14D2     		bcs	.L312
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3465              		.loc 1 3722 0
 3466 0014 8169     		ldr	r1, [r0, #24]
 3467 0016 0029     		cmp	r1, #0
 3468 0018 05DB     		blt	.L314
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3469              		.loc 1 3724 0
 3470 001a 1E49     		ldr	r1, .L323
 3471 001c 0968     		ldr	r1, [r1]
 3472 001e C96A     		ldr	r1, [r1, #44]
 3473 0020 C1F10701 		rsb	r1, r1, #7
 3474 0024 8161     		str	r1, [r0, #24]
 3475              	.L314:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3476              		.loc 1 3733 0
 3477 0026 6069     		ldr	r0, [r4, #20]
 3478              	.LVL284:
 3479 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3480 002c 9100     		lsls	r1, r2, #2
 3481 002e 1A4A     		ldr	r2, .L323+4
 3482 0030 0A44     		add	r2, r2, r1
 3483 0032 9042     		cmp	r0, r2
 3484 0034 04D0     		beq	.L322
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 157


3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3485              		.loc 1 3751 0
 3486 0036 174A     		ldr	r2, .L323
 3487 0038 1268     		ldr	r2, [r2]
 3488 003a D26A     		ldr	r2, [r2, #44]
 3489 003c E262     		str	r2, [r4, #44]
 3490              	.L312:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3491              		.loc 1 3765 0
 3492 003e 38BD     		pop	{r3, r4, r5, pc}
 3493              	.LVL285:
 3494              	.L322:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3495              		.loc 1 3735 0
 3496 0040 251D     		adds	r5, r4, #4
 3497 0042 2846     		mov	r0, r5
 3498 0044 FFF7FEFF 		bl	uxListRemove
 3499              	.LVL286:
 3500 0048 90B1     		cbz	r0, .L316
 3501              	.L317:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3502              		.loc 1 3745 0
 3503 004a 124B     		ldr	r3, .L323
 3504 004c 1B68     		ldr	r3, [r3]
 3505 004e DB6A     		ldr	r3, [r3, #44]
 3506 0050 E362     		str	r3, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3507              		.loc 1 3746 0
 3508 0052 0122     		movs	r2, #1
 3509 0054 9A40     		lsls	r2, r2, r3
 3510 0056 1149     		ldr	r1, .L323+8
 3511 0058 0868     		ldr	r0, [r1]
 3512 005a 0243     		orrs	r2, r2, r0
 3513 005c 0A60     		str	r2, [r1]
 3514 005e 03EB8303 		add	r3, r3, r3, lsl #2
 3515 0062 9A00     		lsls	r2, r3, #2
 3516 0064 2946     		mov	r1, r5
 3517 0066 0C48     		ldr	r0, .L323+4
 3518 0068 1044     		add	r0, r0, r2
 3519 006a FFF7FEFF 		bl	vListInsertEnd
 3520              	.LVL287:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3521              		.loc 1 3765 0
 3522 006e E6E7     		b	.L312
 3523              	.L316:
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3524              		.loc 1 3737 0
 3525 0070 E36A     		ldr	r3, [r4, #44]
 3526 0072 03EB8301 		add	r1, r3, r3, lsl #2
 3527 0076 8A00     		lsls	r2, r1, #2
 3528 0078 0749     		ldr	r1, .L323+4
 3529 007a 8A58     		ldr	r2, [r1, r2]
 3530 007c 002A     		cmp	r2, #0
 3531 007e E4D1     		bne	.L317
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3532              		.loc 1 3737 0 is_stmt 0 discriminator 1
 3533 0080 0122     		movs	r2, #1
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 158


 3534 0082 9A40     		lsls	r2, r2, r3
 3535 0084 0549     		ldr	r1, .L323+8
 3536 0086 0B68     		ldr	r3, [r1]
 3537 0088 23EA0203 		bic	r3, r3, r2
 3538 008c 0B60     		str	r3, [r1]
 3539 008e DCE7     		b	.L317
 3540              	.LVL288:
 3541              	.L319:
 3542              	.LCFI38:
 3543              		.cfi_def_cfa_offset 0
 3544              		.cfi_restore 3
 3545              		.cfi_restore 4
 3546              		.cfi_restore 5
 3547              		.cfi_restore 14
 3548 0090 7047     		bx	lr
 3549              	.L324:
 3550 0092 00BF     		.align	2
 3551              	.L323:
 3552 0094 00000000 		.word	.LANCHOR10
 3553 0098 00000000 		.word	.LANCHOR4
 3554 009c 00000000 		.word	.LANCHOR13
 3555              		.cfi_endproc
 3556              	.LFE41:
 3558              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3559              		.align	1
 3560              		.global	xTaskPriorityDisinherit
 3561              		.syntax unified
 3562              		.thumb
 3563              		.thumb_func
 3564              		.fpu fpv5-sp-d16
 3566              	xTaskPriorityDisinherit:
 3567              	.LFB42:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3568              		.loc 1 3773 0 is_stmt 1
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              	.LVL289:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3573              		.loc 1 3777 0
 3574 0000 0028     		cmp	r0, #0
 3575 0002 4DD0     		beq	.L332
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3576              		.loc 1 3773 0
 3577 0004 38B5     		push	{r3, r4, r5, lr}
 3578              	.LCFI39:
 3579              		.cfi_def_cfa_offset 16
 3580              		.cfi_offset 3, -16
 3581              		.cfi_offset 4, -12
 3582              		.cfi_offset 5, -8
 3583              		.cfi_offset 14, -4
 3584 0006 0446     		mov	r4, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3585              		.loc 1 3783 0
 3586 0008 284A     		ldr	r2, .L339
 3587 000a 1268     		ldr	r2, [r2]
 3588 000c 8242     		cmp	r2, r0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 159


 3589 000e 0AD0     		beq	.L327
 3590              	.LBB163:
 3591              	.LBB164:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3592              		.loc 2 237 0
 3593              		.syntax unified
 3594              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3595 0010 4FF05003 			mov r3, #80												
 3596 0014 72B6     		cpsid i													
 3597 0016 83F31188 		msr basepri, r3											
 3598 001a BFF36F8F 		isb														
 3599 001e BFF34F8F 		dsb														
 3600 0022 62B6     		cpsie i													
 3601              	
 3602              	@ 0 "" 2
 3603              	.LVL290:
 3604              		.thumb
 3605              		.syntax unified
 3606              	.L328:
 3607 0024 FEE7     		b	.L328
 3608              	.L327:
 3609              	.LBE164:
 3610              	.LBE163:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3611              		.loc 1 3785 0
 3612 0026 826C     		ldr	r2, [r0, #72]
 3613 0028 52B9     		cbnz	r2, .L329
 3614              	.LBB165:
 3615              	.LBB166:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 3616              		.loc 2 237 0
 3617              		.syntax unified
 3618              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3619 002a 4FF05003 			mov r3, #80												
 3620 002e 72B6     		cpsid i													
 3621 0030 83F31188 		msr basepri, r3											
 3622 0034 BFF36F8F 		isb														
 3623 0038 BFF34F8F 		dsb														
 3624 003c 62B6     		cpsie i													
 3625              	
 3626              	@ 0 "" 2
 3627              	.LVL291:
 3628              		.thumb
 3629              		.syntax unified
 3630              	.L330:
 3631 003e FEE7     		b	.L330
 3632              	.L329:
 3633              	.LBE166:
 3634              	.LBE165:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3635              		.loc 1 3786 0
 3636 0040 013A     		subs	r2, r2, #1
 3637 0042 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3638              		.loc 1 3790 0
 3639 0044 C06A     		ldr	r0, [r0, #44]
 3640              	.LVL292:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 160


 3641 0046 616C     		ldr	r1, [r4, #68]
 3642 0048 8842     		cmp	r0, r1
 3643 004a 2BD0     		beq	.L333
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3644              		.loc 1 3793 0
 3645 004c 62BB     		cbnz	r2, .L334
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3646              		.loc 1 3800 0
 3647 004e 251D     		adds	r5, r4, #4
 3648 0050 2846     		mov	r0, r5
 3649 0052 FFF7FEFF 		bl	uxListRemove
 3650              	.LVL293:
 3651 0056 70B9     		cbnz	r0, .L331
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3652              		.loc 1 3802 0
 3653 0058 E26A     		ldr	r2, [r4, #44]
 3654 005a 1423     		movs	r3, #20
 3655 005c 03FB02F3 		mul	r3, r3, r2
 3656 0060 1349     		ldr	r1, .L339+4
 3657 0062 CB58     		ldr	r3, [r1, r3]
 3658 0064 3BB9     		cbnz	r3, .L331
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3659              		.loc 1 3802 0 is_stmt 0 discriminator 1
 3660 0066 0123     		movs	r3, #1
 3661 0068 03FA02F2 		lsl	r2, r3, r2
 3662 006c 1149     		ldr	r1, .L339+8
 3663 006e 0B68     		ldr	r3, [r1]
 3664 0070 23EA0203 		bic	r3, r3, r2
 3665 0074 0B60     		str	r3, [r1]
 3666              	.L331:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3667              		.loc 1 3812 0 is_stmt 1
 3668 0076 636C     		ldr	r3, [r4, #68]
 3669 0078 E362     		str	r3, [r4, #44]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3670              		.loc 1 3817 0
 3671 007a C3F10702 		rsb	r2, r3, #7
 3672 007e A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3673              		.loc 1 3818 0
 3674 0080 0124     		movs	r4, #1
 3675              	.LVL294:
 3676 0082 04FA03F2 		lsl	r2, r4, r3
 3677 0086 0B49     		ldr	r1, .L339+8
 3678 0088 0868     		ldr	r0, [r1]
 3679 008a 0243     		orrs	r2, r2, r0
 3680 008c 0A60     		str	r2, [r1]
 3681 008e 2946     		mov	r1, r5
 3682 0090 074A     		ldr	r2, .L339+4
 3683 0092 1420     		movs	r0, #20
 3684 0094 00FB0320 		mla	r0, r0, r3, r2
 3685 0098 FFF7FEFF 		bl	vListInsertEnd
 3686              	.LVL295:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3687              		.loc 1 3828 0
 3688 009c 2046     		mov	r0, r4
 3689              	.LVL296:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 161


 3690              	.L325:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3691              		.loc 1 3846 0
 3692 009e 38BD     		pop	{r3, r4, r5, pc}
 3693              	.LVL297:
 3694              	.L332:
 3695              	.LCFI40:
 3696              		.cfi_def_cfa_offset 0
 3697              		.cfi_restore 3
 3698              		.cfi_restore 4
 3699              		.cfi_restore 5
 3700              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3701              		.loc 1 3775 0
 3702 00a0 0020     		movs	r0, #0
 3703              	.LVL298:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3704              		.loc 1 3846 0
 3705 00a2 7047     		bx	lr
 3706              	.LVL299:
 3707              	.L333:
 3708              	.LCFI41:
 3709              		.cfi_def_cfa_offset 16
 3710              		.cfi_offset 3, -16
 3711              		.cfi_offset 4, -12
 3712              		.cfi_offset 5, -8
 3713              		.cfi_offset 14, -4
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3714              		.loc 1 3775 0
 3715 00a4 0020     		movs	r0, #0
 3716 00a6 FAE7     		b	.L325
 3717              	.L334:
 3718 00a8 0020     		movs	r0, #0
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3719              		.loc 1 3845 0
 3720 00aa F8E7     		b	.L325
 3721              	.L340:
 3722              		.align	2
 3723              	.L339:
 3724 00ac 00000000 		.word	.LANCHOR10
 3725 00b0 00000000 		.word	.LANCHOR4
 3726 00b4 00000000 		.word	.LANCHOR13
 3727              		.cfi_endproc
 3728              	.LFE42:
 3730              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3731              		.align	1
 3732              		.global	uxTaskResetEventItemValue
 3733              		.syntax unified
 3734              		.thumb
 3735              		.thumb_func
 3736              		.fpu fpv5-sp-d16
 3738              	uxTaskResetEventItemValue:
 3739              	.LFB43:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3740              		.loc 1 4163 0
 3741              		.cfi_startproc
 3742              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 162


 3743              		@ frame_needed = 0, uses_anonymous_args = 0
 3744              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3745              		.loc 1 4166 0
 3746 0000 044A     		ldr	r2, .L342
 3747 0002 1368     		ldr	r3, [r2]
 3748 0004 9869     		ldr	r0, [r3, #24]
 3749              	.LVL300:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3750              		.loc 1 4170 0
 3751 0006 1368     		ldr	r3, [r2]
 3752 0008 DB6A     		ldr	r3, [r3, #44]
 3753 000a 1268     		ldr	r2, [r2]
 3754 000c C3F10703 		rsb	r3, r3, #7
 3755 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3756              		.loc 1 4173 0
 3757 0012 7047     		bx	lr
 3758              	.L343:
 3759              		.align	2
 3760              	.L342:
 3761 0014 00000000 		.word	.LANCHOR10
 3762              		.cfi_endproc
 3763              	.LFE43:
 3765              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3766              		.align	1
 3767              		.global	pvTaskIncrementMutexHeldCount
 3768              		.syntax unified
 3769              		.thumb
 3770              		.thumb_func
 3771              		.fpu fpv5-sp-d16
 3773              	pvTaskIncrementMutexHeldCount:
 3774              	.LFB44:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3775              		.loc 1 4179 0
 3776              		.cfi_startproc
 3777              		@ args = 0, pretend = 0, frame = 0
 3778              		@ frame_needed = 0, uses_anonymous_args = 0
 3779              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3780              		.loc 1 4182 0
 3781 0000 054B     		ldr	r3, .L346
 3782 0002 1B68     		ldr	r3, [r3]
 3783 0004 23B1     		cbz	r3, .L345
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3784              		.loc 1 4184 0
 3785 0006 044B     		ldr	r3, .L346
 3786 0008 1A68     		ldr	r2, [r3]
 3787 000a 936C     		ldr	r3, [r2, #72]
 3788 000c 0133     		adds	r3, r3, #1
 3789 000e 9364     		str	r3, [r2, #72]
 3790              	.L345:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3791              		.loc 1 4187 0
 3792 0010 014B     		ldr	r3, .L346
 3793 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 163


 3794              		.loc 1 4188 0
 3795 0014 7047     		bx	lr
 3796              	.L347:
 3797 0016 00BF     		.align	2
 3798              	.L346:
 3799 0018 00000000 		.word	.LANCHOR10
 3800              		.cfi_endproc
 3801              	.LFE44:
 3803              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3804              		.align	1
 3805              		.global	ulTaskNotifyTake
 3806              		.syntax unified
 3807              		.thumb
 3808              		.thumb_func
 3809              		.fpu fpv5-sp-d16
 3811              	ulTaskNotifyTake:
 3812              	.LFB45:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3813              		.loc 1 4196 0
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 0
 3816              		@ frame_needed = 0, uses_anonymous_args = 0
 3817              	.LVL301:
 3818 0000 38B5     		push	{r3, r4, r5, lr}
 3819              	.LCFI42:
 3820              		.cfi_def_cfa_offset 16
 3821              		.cfi_offset 3, -16
 3822              		.cfi_offset 4, -12
 3823              		.cfi_offset 5, -8
 3824              		.cfi_offset 14, -4
 3825 0002 0546     		mov	r5, r0
 3826 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3827              		.loc 1 4199 0
 3828 0006 FFF7FEFF 		bl	vPortEnterCritical
 3829              	.LVL302:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3830              		.loc 1 4202 0
 3831 000a 194B     		ldr	r3, .L355
 3832 000c 1B68     		ldr	r3, [r3]
 3833 000e DB6C     		ldr	r3, [r3, #76]
 3834 0010 2BB9     		cbnz	r3, .L349
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3835              		.loc 1 4205 0
 3836 0012 174B     		ldr	r3, .L355
 3837 0014 1B68     		ldr	r3, [r3]
 3838 0016 0122     		movs	r2, #1
 3839 0018 83F85020 		strb	r2, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3840              		.loc 1 4207 0
 3841 001c ACB9     		cbnz	r4, .L353
 3842              	.L349:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3843              		.loc 1 4228 0
 3844 001e FFF7FEFF 		bl	vPortExitCritical
 3845              	.LVL303:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 164


 3846              		.loc 1 4230 0
 3847 0022 FFF7FEFF 		bl	vPortEnterCritical
 3848              	.LVL304:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3849              		.loc 1 4233 0
 3850 0026 124B     		ldr	r3, .L355
 3851 0028 1B68     		ldr	r3, [r3]
 3852 002a DC6C     		ldr	r4, [r3, #76]
 3853              	.LVL305:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3854              		.loc 1 4235 0
 3855 002c 24B1     		cbz	r4, .L350
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3856              		.loc 1 4237 0
 3857 002e CDB9     		cbnz	r5, .L354
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3858              		.loc 1 4243 0
 3859 0030 0F4B     		ldr	r3, .L355
 3860 0032 1B68     		ldr	r3, [r3]
 3861 0034 621E     		subs	r2, r4, #1
 3862 0036 DA64     		str	r2, [r3, #76]
 3863              	.L350:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3864              		.loc 1 4251 0
 3865 0038 0D4B     		ldr	r3, .L355
 3866 003a 1B68     		ldr	r3, [r3]
 3867 003c 0022     		movs	r2, #0
 3868 003e 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3869              		.loc 1 4253 0
 3870 0042 FFF7FEFF 		bl	vPortExitCritical
 3871              	.LVL306:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3872              		.loc 1 4256 0
 3873 0046 2046     		mov	r0, r4
 3874 0048 38BD     		pop	{r3, r4, r5, pc}
 3875              	.LVL307:
 3876              	.L353:
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3877              		.loc 1 4209 0
 3878 004a 1146     		mov	r1, r2
 3879 004c 2046     		mov	r0, r4
 3880 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3881              	.LVL308:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3882              		.loc 1 4216 0
 3883 0052 084B     		ldr	r3, .L355+4
 3884 0054 4FF08052 		mov	r2, #268435456
 3885 0058 1A60     		str	r2, [r3]
 3886              		.syntax unified
 3887              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3888 005a BFF34F8F 		dsb
 3889              	@ 0 "" 2
 3890              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3891 005e BFF36F8F 		isb
 3892              	@ 0 "" 2
 3893              		.thumb
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 165


 3894              		.syntax unified
 3895 0062 DCE7     		b	.L349
 3896              	.LVL309:
 3897              	.L354:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3898              		.loc 1 4239 0
 3899 0064 024B     		ldr	r3, .L355
 3900 0066 1B68     		ldr	r3, [r3]
 3901 0068 0022     		movs	r2, #0
 3902 006a DA64     		str	r2, [r3, #76]
 3903 006c E4E7     		b	.L350
 3904              	.L356:
 3905 006e 00BF     		.align	2
 3906              	.L355:
 3907 0070 00000000 		.word	.LANCHOR10
 3908 0074 04ED00E0 		.word	-536810236
 3909              		.cfi_endproc
 3910              	.LFE45:
 3912              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3913              		.align	1
 3914              		.global	xTaskNotifyWait
 3915              		.syntax unified
 3916              		.thumb
 3917              		.thumb_func
 3918              		.fpu fpv5-sp-d16
 3920              	xTaskNotifyWait:
 3921              	.LFB46:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3922              		.loc 1 4264 0
 3923              		.cfi_startproc
 3924              		@ args = 0, pretend = 0, frame = 0
 3925              		@ frame_needed = 0, uses_anonymous_args = 0
 3926              	.LVL310:
 3927 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3928              	.LCFI43:
 3929              		.cfi_def_cfa_offset 24
 3930              		.cfi_offset 3, -24
 3931              		.cfi_offset 4, -20
 3932              		.cfi_offset 5, -16
 3933              		.cfi_offset 6, -12
 3934              		.cfi_offset 7, -8
 3935              		.cfi_offset 14, -4
 3936 0002 0746     		mov	r7, r0
 3937 0004 0D46     		mov	r5, r1
 3938 0006 1446     		mov	r4, r2
 3939 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3940              		.loc 1 4267 0
 3941 000a FFF7FEFF 		bl	vPortEnterCritical
 3942              	.LVL311:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3943              		.loc 1 4270 0
 3944 000e 204B     		ldr	r3, .L364
 3945 0010 1B68     		ldr	r3, [r3]
 3946 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3947 0016 DBB2     		uxtb	r3, r3
 3948 0018 022B     		cmp	r3, #2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 166


 3949 001a 0AD0     		beq	.L358
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3950              		.loc 1 4275 0
 3951 001c 1C4B     		ldr	r3, .L364
 3952 001e 1A68     		ldr	r2, [r3]
 3953 0020 D06C     		ldr	r0, [r2, #76]
 3954 0022 20EA0700 		bic	r0, r0, r7
 3955 0026 D064     		str	r0, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3956              		.loc 1 4278 0
 3957 0028 1B68     		ldr	r3, [r3]
 3958 002a 0122     		movs	r2, #1
 3959 002c 83F85020 		strb	r2, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3960              		.loc 1 4280 0
 3961 0030 FEB9     		cbnz	r6, .L363
 3962              	.L358:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3963              		.loc 1 4301 0
 3964 0032 FFF7FEFF 		bl	vPortExitCritical
 3965              	.LVL312:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3966              		.loc 1 4303 0
 3967 0036 FFF7FEFF 		bl	vPortEnterCritical
 3968              	.LVL313:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3969              		.loc 1 4307 0
 3970 003a 1CB1     		cbz	r4, .L359
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3971              		.loc 1 4311 0
 3972 003c 144B     		ldr	r3, .L364
 3973 003e 1B68     		ldr	r3, [r3]
 3974 0040 DB6C     		ldr	r3, [r3, #76]
 3975 0042 2360     		str	r3, [r4]
 3976              	.L359:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3977              		.loc 1 4318 0
 3978 0044 124B     		ldr	r3, .L364
 3979 0046 1B68     		ldr	r3, [r3]
 3980 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3981 004c DBB2     		uxtb	r3, r3
 3982 004e 012B     		cmp	r3, #1
 3983 0050 1CD0     		beq	.L361
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3984              		.loc 1 4327 0
 3985 0052 0F4B     		ldr	r3, .L364
 3986 0054 1B68     		ldr	r3, [r3]
 3987 0056 D96C     		ldr	r1, [r3, #76]
 3988 0058 21EA0501 		bic	r1, r1, r5
 3989 005c D964     		str	r1, [r3, #76]
 3990              	.LVL314:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3991              		.loc 1 4328 0
 3992 005e 0124     		movs	r4, #1
 3993              	.LVL315:
 3994              	.L360:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 167


 3995              		.loc 1 4331 0
 3996 0060 0B4B     		ldr	r3, .L364
 3997 0062 1B68     		ldr	r3, [r3]
 3998 0064 0022     		movs	r2, #0
 3999 0066 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4000              		.loc 1 4333 0
 4001 006a FFF7FEFF 		bl	vPortExitCritical
 4002              	.LVL316:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4003              		.loc 1 4336 0
 4004 006e 2046     		mov	r0, r4
 4005 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4006              	.LVL317:
 4007              	.L363:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4008              		.loc 1 4282 0
 4009 0072 1146     		mov	r1, r2
 4010 0074 3046     		mov	r0, r6
 4011 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4012              	.LVL318:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4013              		.loc 1 4289 0
 4014 007a 064B     		ldr	r3, .L364+4
 4015 007c 4FF08052 		mov	r2, #268435456
 4016 0080 1A60     		str	r2, [r3]
 4017              		.syntax unified
 4018              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4019 0082 BFF34F8F 		dsb
 4020              	@ 0 "" 2
 4021              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4022 0086 BFF36F8F 		isb
 4023              	@ 0 "" 2
 4024              		.thumb
 4025              		.syntax unified
 4026 008a D2E7     		b	.L358
 4027              	.L361:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4028              		.loc 1 4321 0
 4029 008c 0024     		movs	r4, #0
 4030              	.LVL319:
 4031 008e E7E7     		b	.L360
 4032              	.L365:
 4033              		.align	2
 4034              	.L364:
 4035 0090 00000000 		.word	.LANCHOR10
 4036 0094 04ED00E0 		.word	-536810236
 4037              		.cfi_endproc
 4038              	.LFE46:
 4040              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4041              		.align	1
 4042              		.global	xTaskGenericNotify
 4043              		.syntax unified
 4044              		.thumb
 4045              		.thumb_func
 4046              		.fpu fpv5-sp-d16
 4048              	xTaskGenericNotify:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 168


 4049              	.LFB47:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4050              		.loc 1 4344 0
 4051              		.cfi_startproc
 4052              		@ args = 0, pretend = 0, frame = 0
 4053              		@ frame_needed = 0, uses_anonymous_args = 0
 4054              	.LVL320:
 4055 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4056              	.LCFI44:
 4057              		.cfi_def_cfa_offset 24
 4058              		.cfi_offset 3, -24
 4059              		.cfi_offset 4, -20
 4060              		.cfi_offset 5, -16
 4061              		.cfi_offset 6, -12
 4062              		.cfi_offset 7, -8
 4063              		.cfi_offset 14, -4
 4064              	.LVL321:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4065              		.loc 1 4349 0
 4066 0002 50B9     		cbnz	r0, .L367
 4067              	.LBB167:
 4068              	.LBB168:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4069              		.loc 2 237 0
 4070              		.syntax unified
 4071              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4072 0004 4FF05003 			mov r3, #80												
 4073 0008 72B6     		cpsid i													
 4074 000a 83F31188 		msr basepri, r3											
 4075 000e BFF36F8F 		isb														
 4076 0012 BFF34F8F 		dsb														
 4077 0016 62B6     		cpsie i													
 4078              	
 4079              	@ 0 "" 2
 4080              	.LVL322:
 4081              		.thumb
 4082              		.syntax unified
 4083              	.L368:
 4084 0018 FEE7     		b	.L368
 4085              	.LVL323:
 4086              	.L367:
 4087 001a 0446     		mov	r4, r0
 4088 001c 1F46     		mov	r7, r3
 4089 001e 1546     		mov	r5, r2
 4090 0020 0E46     		mov	r6, r1
 4091              	.LVL324:
 4092              	.LBE168:
 4093              	.LBE167:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4094              		.loc 1 4352 0
 4095 0022 FFF7FEFF 		bl	vPortEnterCritical
 4096              	.LVL325:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4097              		.loc 1 4354 0
 4098 0026 0FB1     		cbz	r7, .L369
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4099              		.loc 1 4356 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 169


 4100 0028 E36C     		ldr	r3, [r4, #76]
 4101 002a 3B60     		str	r3, [r7]
 4102              	.L369:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4103              		.loc 1 4359 0
 4104 002c 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4105 0030 DBB2     		uxtb	r3, r3
 4106              	.LVL326:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4107              		.loc 1 4361 0
 4108 0032 0222     		movs	r2, #2
 4109 0034 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4110              		.loc 1 4363 0
 4111 0038 6A1E     		subs	r2, r5, #1
 4112 003a 032A     		cmp	r2, #3
 4113 003c 1AD8     		bhi	.L379
 4114 003e DFE802F0 		tbb	[pc, r2]
 4115              	.L372:
 4116 0042 02       		.byte	(.L371-.L372)/2
 4117 0043 0C       		.byte	(.L373-.L372)/2
 4118 0044 11       		.byte	(.L374-.L372)/2
 4119 0045 14       		.byte	(.L375-.L372)/2
 4120              		.p2align 1
 4121              	.L371:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4122              		.loc 1 4366 0
 4123 0046 E26C     		ldr	r2, [r4, #76]
 4124 0048 1643     		orrs	r6, r6, r2
 4125              	.LVL327:
 4126 004a E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4127              		.loc 1 4346 0
 4128 004c 0125     		movs	r5, #1
 4129              	.L370:
 4130              	.LVL328:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4131              		.loc 1 4399 0
 4132 004e 012B     		cmp	r3, #1
 4133 0050 14D0     		beq	.L382
 4134              	.LVL329:
 4135              	.L376:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4136              		.loc 1 4439 0
 4137 0052 FFF7FEFF 		bl	vPortExitCritical
 4138              	.LVL330:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4139              		.loc 1 4442 0
 4140 0056 2846     		mov	r0, r5
 4141 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4142              	.LVL331:
 4143              	.L373:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4144              		.loc 1 4370 0
 4145 005a E26C     		ldr	r2, [r4, #76]
 4146 005c 0132     		adds	r2, r2, #1
 4147 005e E264     		str	r2, [r4, #76]
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 170


4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4148              		.loc 1 4346 0
 4149 0060 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4150              		.loc 1 4371 0
 4151 0062 F4E7     		b	.L370
 4152              	.L374:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4153              		.loc 1 4374 0
 4154 0064 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4155              		.loc 1 4346 0
 4156 0066 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4157              		.loc 1 4375 0
 4158 0068 F1E7     		b	.L370
 4159              	.L375:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4160              		.loc 1 4378 0
 4161 006a 022B     		cmp	r3, #2
 4162 006c 04D0     		beq	.L380
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4163              		.loc 1 4380 0
 4164 006e E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4165              		.loc 1 4346 0
 4166 0070 0125     		movs	r5, #1
 4167 0072 ECE7     		b	.L370
 4168              	.L379:
 4169 0074 0125     		movs	r5, #1
 4170 0076 EAE7     		b	.L370
 4171              	.L380:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4172              		.loc 1 4385 0
 4173 0078 0025     		movs	r5, #0
 4174 007a E8E7     		b	.L370
 4175              	.LVL332:
 4176              	.L382:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4177              		.loc 1 4401 0
 4178 007c 261D     		adds	r6, r4, #4
 4179 007e 3046     		mov	r0, r6
 4180 0080 FFF7FEFF 		bl	uxListRemove
 4181              	.LVL333:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4182              		.loc 1 4402 0
 4183 0084 E26A     		ldr	r2, [r4, #44]
 4184 0086 0123     		movs	r3, #1
 4185 0088 9340     		lsls	r3, r3, r2
 4186 008a 0D49     		ldr	r1, .L383
 4187 008c 0868     		ldr	r0, [r1]
 4188 008e 0343     		orrs	r3, r3, r0
 4189 0090 0B60     		str	r3, [r1]
 4190 0092 3146     		mov	r1, r6
 4191 0094 0B4B     		ldr	r3, .L383+4
 4192 0096 1420     		movs	r0, #20
 4193 0098 00FB0230 		mla	r0, r0, r2, r3
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 171


 4194 009c FFF7FEFF 		bl	vListInsertEnd
 4195              	.LVL334:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4196              		.loc 1 4405 0
 4197 00a0 A36A     		ldr	r3, [r4, #40]
 4198 00a2 53B1     		cbz	r3, .L377
 4199              	.LBB169:
 4200              	.LBB170:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4201              		.loc 2 237 0
 4202              		.syntax unified
 4203              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4204 00a4 4FF05003 			mov r3, #80												
 4205 00a8 72B6     		cpsid i													
 4206 00aa 83F31188 		msr basepri, r3											
 4207 00ae BFF36F8F 		isb														
 4208 00b2 BFF34F8F 		dsb														
 4209 00b6 62B6     		cpsie i													
 4210              	
 4211              	@ 0 "" 2
 4212              	.LVL335:
 4213              		.thumb
 4214              		.syntax unified
 4215              	.L378:
 4216 00b8 FEE7     		b	.L378
 4217              	.L377:
 4218              	.LBE170:
 4219              	.LBE169:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4220              		.loc 1 4423 0
 4221 00ba 034B     		ldr	r3, .L383+8
 4222 00bc 1B68     		ldr	r3, [r3]
 4223 00be C8E7     		b	.L376
 4224              	.L384:
 4225              		.align	2
 4226              	.L383:
 4227 00c0 00000000 		.word	.LANCHOR13
 4228 00c4 00000000 		.word	.LANCHOR4
 4229 00c8 00000000 		.word	.LANCHOR10
 4230              		.cfi_endproc
 4231              	.LFE47:
 4233              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4234              		.align	1
 4235              		.global	xTaskGenericNotifyFromISR
 4236              		.syntax unified
 4237              		.thumb
 4238              		.thumb_func
 4239              		.fpu fpv5-sp-d16
 4241              	xTaskGenericNotifyFromISR:
 4242              	.LFB48:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4243              		.loc 1 4450 0
 4244              		.cfi_startproc
 4245              		@ args = 4, pretend = 0, frame = 0
 4246              		@ frame_needed = 0, uses_anonymous_args = 0
 4247              	.LVL336:
 4248 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 172


 4249              	.LCFI45:
 4250              		.cfi_def_cfa_offset 32
 4251              		.cfi_offset 3, -32
 4252              		.cfi_offset 4, -28
 4253              		.cfi_offset 5, -24
 4254              		.cfi_offset 6, -20
 4255              		.cfi_offset 7, -16
 4256              		.cfi_offset 8, -12
 4257              		.cfi_offset 9, -8
 4258              		.cfi_offset 14, -4
 4259 0004 089E     		ldr	r6, [sp, #32]
 4260              	.LVL337:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4261              		.loc 1 4456 0
 4262 0006 50B9     		cbnz	r0, .L386
 4263              	.LBB171:
 4264              	.LBB172:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4265              		.loc 2 237 0
 4266              		.syntax unified
 4267              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4268 0008 4FF05003 			mov r3, #80												
 4269 000c 72B6     		cpsid i													
 4270 000e 83F31188 		msr basepri, r3											
 4271 0012 BFF36F8F 		isb														
 4272 0016 BFF34F8F 		dsb														
 4273 001a 62B6     		cpsie i													
 4274              	
 4275              	@ 0 "" 2
 4276              	.LVL338:
 4277              		.thumb
 4278              		.syntax unified
 4279              	.L387:
 4280 001c FEE7     		b	.L387
 4281              	.LVL339:
 4282              	.L386:
 4283 001e 0446     		mov	r4, r0
 4284 0020 9946     		mov	r9, r3
 4285 0022 1546     		mov	r5, r2
 4286 0024 8846     		mov	r8, r1
 4287              	.LBE172:
 4288              	.LBE171:
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4289              		.loc 1 4474 0
 4290 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4291              	.LVL340:
 4292              	.LBB173:
 4293              	.LBB174:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4294              		.loc 2 255 0
 4295              		.syntax unified
 4296              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4297 002a EFF31187 			mrs r7, basepri											
 4298 002e 4FF05003 		mov r3, #80												
 4299 0032 72B6     		cpsid i													
 4300 0034 83F31188 		msr basepri, r3											
 4301 0038 BFF36F8F 		isb														
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 173


 4302 003c BFF34F8F 		dsb														
 4303 0040 62B6     		cpsie i													
 4304              	
 4305              	@ 0 "" 2
 4306              		.thumb
 4307              		.syntax unified
 4308              	.LBE174:
 4309              	.LBE173:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4310              		.loc 1 4480 0
 4311 0042 B9F1000F 		cmp	r9, #0
 4312 0046 02D0     		beq	.L388
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4313              		.loc 1 4482 0
 4314 0048 E36C     		ldr	r3, [r4, #76]
 4315 004a C9F80030 		str	r3, [r9]
 4316              	.L388:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4317              		.loc 1 4485 0
 4318 004e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4319 0052 DBB2     		uxtb	r3, r3
 4320              	.LVL341:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4321              		.loc 1 4486 0
 4322 0054 0222     		movs	r2, #2
 4323 0056 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4324              		.loc 1 4488 0
 4325 005a 6A1E     		subs	r2, r5, #1
 4326 005c 032A     		cmp	r2, #3
 4327 005e 1ED8     		bhi	.L401
 4328 0060 DFE802F0 		tbb	[pc, r2]
 4329              	.L391:
 4330 0064 02       		.byte	(.L390-.L391)/2
 4331 0065 0E       		.byte	(.L392-.L391)/2
 4332 0066 13       		.byte	(.L393-.L391)/2
 4333 0067 17       		.byte	(.L394-.L391)/2
 4334              		.p2align 1
 4335              	.L390:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4336              		.loc 1 4491 0
 4337 0068 E26C     		ldr	r2, [r4, #76]
 4338 006a 42EA0802 		orr	r2, r2, r8
 4339 006e E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4340              		.loc 1 4453 0
 4341 0070 0125     		movs	r5, #1
 4342              	.L389:
 4343              	.LVL342:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4344              		.loc 1 4524 0
 4345 0072 012B     		cmp	r3, #1
 4346 0074 17D0     		beq	.L404
 4347              	.LVL343:
 4348              	.L395:
 4349              	.LBB175:
 4350              	.LBB176:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 174


 4351              		.loc 2 275 0
 4352              		.syntax unified
 4353              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4354 0076 87F31188 			msr basepri, r7	
 4355              	@ 0 "" 2
 4356              	.LVL344:
 4357              		.thumb
 4358              		.syntax unified
 4359              	.LBE176:
 4360              	.LBE175:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4361              		.loc 1 4566 0
 4362 007a 2846     		mov	r0, r5
 4363 007c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4364              	.LVL345:
 4365              	.L392:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4366              		.loc 1 4495 0
 4367 0080 E26C     		ldr	r2, [r4, #76]
 4368 0082 0132     		adds	r2, r2, #1
 4369 0084 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4370              		.loc 1 4453 0
 4371 0086 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4372              		.loc 1 4496 0
 4373 0088 F3E7     		b	.L389
 4374              	.L393:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4375              		.loc 1 4499 0
 4376 008a C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4377              		.loc 1 4453 0
 4378 008e 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4379              		.loc 1 4500 0
 4380 0090 EFE7     		b	.L389
 4381              	.L394:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4382              		.loc 1 4503 0
 4383 0092 022B     		cmp	r3, #2
 4384 0094 05D0     		beq	.L402
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4385              		.loc 1 4505 0
 4386 0096 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4387              		.loc 1 4453 0
 4388 009a 0125     		movs	r5, #1
 4389 009c E9E7     		b	.L389
 4390              	.L401:
 4391 009e 0125     		movs	r5, #1
 4392 00a0 E7E7     		b	.L389
 4393              	.L402:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4394              		.loc 1 4510 0
 4395 00a2 0025     		movs	r5, #0
 4396 00a4 E5E7     		b	.L389
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 175


 4397              	.LVL346:
 4398              	.L404:
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4399              		.loc 1 4527 0
 4400 00a6 A36A     		ldr	r3, [r4, #40]
 4401              	.LVL347:
 4402 00a8 53B1     		cbz	r3, .L396
 4403              	.LBB177:
 4404              	.LBB178:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4405              		.loc 2 237 0
 4406              		.syntax unified
 4407              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4408 00aa 4FF05003 			mov r3, #80												
 4409 00ae 72B6     		cpsid i													
 4410 00b0 83F31188 		msr basepri, r3											
 4411 00b4 BFF36F8F 		isb														
 4412 00b8 BFF34F8F 		dsb														
 4413 00bc 62B6     		cpsie i													
 4414              	
 4415              	@ 0 "" 2
 4416              	.LVL348:
 4417              		.thumb
 4418              		.syntax unified
 4419              	.L397:
 4420 00be FEE7     		b	.L397
 4421              	.L396:
 4422              	.LBE178:
 4423              	.LBE177:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4424              		.loc 1 4529 0
 4425 00c0 144B     		ldr	r3, .L405
 4426 00c2 1B68     		ldr	r3, [r3]
 4427 00c4 E3B9     		cbnz	r3, .L398
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4428              		.loc 1 4531 0
 4429 00c6 04F10408 		add	r8, r4, #4
 4430              	.LVL349:
 4431 00ca 4046     		mov	r0, r8
 4432 00cc FFF7FEFF 		bl	uxListRemove
 4433              	.LVL350:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4434              		.loc 1 4532 0
 4435 00d0 E26A     		ldr	r2, [r4, #44]
 4436 00d2 0123     		movs	r3, #1
 4437 00d4 9340     		lsls	r3, r3, r2
 4438 00d6 1049     		ldr	r1, .L405+4
 4439 00d8 0868     		ldr	r0, [r1]
 4440 00da 0343     		orrs	r3, r3, r0
 4441 00dc 0B60     		str	r3, [r1]
 4442 00de 4146     		mov	r1, r8
 4443 00e0 0E4B     		ldr	r3, .L405+8
 4444 00e2 1420     		movs	r0, #20
 4445 00e4 00FB0230 		mla	r0, r0, r2, r3
 4446 00e8 FFF7FEFF 		bl	vListInsertEnd
 4447              	.LVL351:
 4448              	.L399:
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 176


4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4449              		.loc 1 4541 0
 4450 00ec E26A     		ldr	r2, [r4, #44]
 4451 00ee 0C4B     		ldr	r3, .L405+12
 4452 00f0 1B68     		ldr	r3, [r3]
 4453 00f2 DB6A     		ldr	r3, [r3, #44]
 4454 00f4 9A42     		cmp	r2, r3
 4455 00f6 BED9     		bls	.L395
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4456              		.loc 1 4545 0
 4457 00f8 46B1     		cbz	r6, .L400
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4458              		.loc 1 4547 0
 4459 00fa 0123     		movs	r3, #1
 4460 00fc 3360     		str	r3, [r6]
 4461 00fe BAE7     		b	.L395
 4462              	.LVL352:
 4463              	.L398:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4464              		.loc 1 4538 0
 4465 0100 04F11801 		add	r1, r4, #24
 4466 0104 0748     		ldr	r0, .L405+16
 4467 0106 FFF7FEFF 		bl	vListInsertEnd
 4468              	.LVL353:
 4469 010a EFE7     		b	.L399
 4470              	.LVL354:
 4471              	.L400:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4472              		.loc 1 4554 0
 4473 010c 064B     		ldr	r3, .L405+20
 4474 010e 0122     		movs	r2, #1
 4475 0110 1A60     		str	r2, [r3]
 4476 0112 B0E7     		b	.L395
 4477              	.L406:
 4478              		.align	2
 4479              	.L405:
 4480 0114 00000000 		.word	.LANCHOR16
 4481 0118 00000000 		.word	.LANCHOR13
 4482 011c 00000000 		.word	.LANCHOR4
 4483 0120 00000000 		.word	.LANCHOR10
 4484 0124 00000000 		.word	.LANCHOR1
 4485 0128 00000000 		.word	.LANCHOR20
 4486              		.cfi_endproc
 4487              	.LFE48:
 4489              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4490              		.align	1
 4491              		.global	vTaskNotifyGiveFromISR
 4492              		.syntax unified
 4493              		.thumb
 4494              		.thumb_func
 4495              		.fpu fpv5-sp-d16
 4497              	vTaskNotifyGiveFromISR:
 4498              	.LFB49:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4499              		.loc 1 4574 0
 4500              		.cfi_startproc
 4501              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 177


 4502              		@ frame_needed = 0, uses_anonymous_args = 0
 4503              	.LVL355:
 4504 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4505              	.LCFI46:
 4506              		.cfi_def_cfa_offset 24
 4507              		.cfi_offset 3, -24
 4508              		.cfi_offset 4, -20
 4509              		.cfi_offset 5, -16
 4510              		.cfi_offset 6, -12
 4511              		.cfi_offset 7, -8
 4512              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4513              		.loc 1 4579 0
 4514 0002 50B9     		cbnz	r0, .L408
 4515              	.LBB179:
 4516              	.LBB180:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4517              		.loc 2 237 0
 4518              		.syntax unified
 4519              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4520 0004 4FF05003 			mov r3, #80												
 4521 0008 72B6     		cpsid i													
 4522 000a 83F31188 		msr basepri, r3											
 4523 000e BFF36F8F 		isb														
 4524 0012 BFF34F8F 		dsb														
 4525 0016 62B6     		cpsie i													
 4526              	
 4527              	@ 0 "" 2
 4528              	.LVL356:
 4529              		.thumb
 4530              		.syntax unified
 4531              	.L409:
 4532 0018 FEE7     		b	.L409
 4533              	.L408:
 4534 001a 0446     		mov	r4, r0
 4535 001c 0D46     		mov	r5, r1
 4536              	.LBE180:
 4537              	.LBE179:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4538              		.loc 1 4597 0
 4539 001e FFF7FEFF 		bl	vPortValidateInterruptPriority
 4540              	.LVL357:
 4541              	.LBB181:
 4542              	.LBB182:
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4543              		.loc 2 255 0
 4544              		.syntax unified
 4545              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4546 0022 EFF31186 			mrs r6, basepri											
 4547 0026 4FF05003 		mov r3, #80												
 4548 002a 72B6     		cpsid i													
 4549 002c 83F31188 		msr basepri, r3											
 4550 0030 BFF36F8F 		isb														
 4551 0034 BFF34F8F 		dsb														
 4552 0038 62B6     		cpsie i													
 4553              	
 4554              	@ 0 "" 2
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 178


 4555              		.thumb
 4556              		.syntax unified
 4557              	.LBE182:
 4558              	.LBE181:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4559              		.loc 1 4603 0
 4560 003a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4561 003e DBB2     		uxtb	r3, r3
 4562              	.LVL358:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4563              		.loc 1 4604 0
 4564 0040 0222     		movs	r2, #2
 4565 0042 84F85020 		strb	r2, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4566              		.loc 1 4608 0
 4567 0046 E26C     		ldr	r2, [r4, #76]
 4568 0048 0132     		adds	r2, r2, #1
 4569 004a E264     		str	r2, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4570              		.loc 1 4614 0
 4571 004c 012B     		cmp	r3, #1
 4572 004e 02D0     		beq	.L417
 4573              	.LVL359:
 4574              	.L410:
 4575              	.LBB183:
 4576              	.LBB184:
 4577              		.loc 2 275 0
 4578              		.syntax unified
 4579              	@ 275 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4580 0050 86F31188 			msr basepri, r6	
 4581              	@ 0 "" 2
 4582              	.LVL360:
 4583              		.thumb
 4584              		.syntax unified
 4585              	.LBE184:
 4586              	.LBE183:
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4587              		.loc 1 4654 0
 4588 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4589              	.LVL361:
 4590              	.L417:
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 4617 0
 4592 0056 A36A     		ldr	r3, [r4, #40]
 4593              	.LVL362:
 4594 0058 53B1     		cbz	r3, .L411
 4595              	.LBB185:
 4596              	.LBB186:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 	(
 4597              		.loc 2 237 0
 4598              		.syntax unified
 4599              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4600 005a 4FF05003 			mov r3, #80												
 4601 005e 72B6     		cpsid i													
 4602 0060 83F31188 		msr basepri, r3											
 4603 0064 BFF36F8F 		isb														
 4604 0068 BFF34F8F 		dsb														
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 179


 4605 006c 62B6     		cpsie i													
 4606              	
 4607              	@ 0 "" 2
 4608              	.LVL363:
 4609              		.thumb
 4610              		.syntax unified
 4611              	.L412:
 4612 006e FEE7     		b	.L412
 4613              	.L411:
 4614              	.LBE186:
 4615              	.LBE185:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4616              		.loc 1 4619 0
 4617 0070 144B     		ldr	r3, .L418
 4618 0072 1B68     		ldr	r3, [r3]
 4619 0074 DBB9     		cbnz	r3, .L413
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4620              		.loc 1 4621 0
 4621 0076 271D     		adds	r7, r4, #4
 4622 0078 3846     		mov	r0, r7
 4623 007a FFF7FEFF 		bl	uxListRemove
 4624              	.LVL364:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4625              		.loc 1 4622 0
 4626 007e E26A     		ldr	r2, [r4, #44]
 4627 0080 0123     		movs	r3, #1
 4628 0082 9340     		lsls	r3, r3, r2
 4629 0084 1049     		ldr	r1, .L418+4
 4630 0086 0868     		ldr	r0, [r1]
 4631 0088 0343     		orrs	r3, r3, r0
 4632 008a 0B60     		str	r3, [r1]
 4633 008c 3946     		mov	r1, r7
 4634 008e 0F4B     		ldr	r3, .L418+8
 4635 0090 1420     		movs	r0, #20
 4636 0092 00FB0230 		mla	r0, r0, r2, r3
 4637 0096 FFF7FEFF 		bl	vListInsertEnd
 4638              	.LVL365:
 4639              	.L414:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4640              		.loc 1 4631 0
 4641 009a E26A     		ldr	r2, [r4, #44]
 4642 009c 0C4B     		ldr	r3, .L418+12
 4643 009e 1B68     		ldr	r3, [r3]
 4644 00a0 DB6A     		ldr	r3, [r3, #44]
 4645 00a2 9A42     		cmp	r2, r3
 4646 00a4 D4D9     		bls	.L410
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4647              		.loc 1 4635 0
 4648 00a6 45B1     		cbz	r5, .L415
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4649              		.loc 1 4637 0
 4650 00a8 0123     		movs	r3, #1
 4651 00aa 2B60     		str	r3, [r5]
 4652 00ac D0E7     		b	.L410
 4653              	.L413:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4654              		.loc 1 4628 0
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 180


 4655 00ae 04F11801 		add	r1, r4, #24
 4656 00b2 0848     		ldr	r0, .L418+16
 4657 00b4 FFF7FEFF 		bl	vListInsertEnd
 4658              	.LVL366:
 4659 00b8 EFE7     		b	.L414
 4660              	.L415:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4661              		.loc 1 4644 0
 4662 00ba 074B     		ldr	r3, .L418+20
 4663 00bc 0122     		movs	r2, #1
 4664 00be 1A60     		str	r2, [r3]
 4665 00c0 C6E7     		b	.L410
 4666              	.L419:
 4667 00c2 00BF     		.align	2
 4668              	.L418:
 4669 00c4 00000000 		.word	.LANCHOR16
 4670 00c8 00000000 		.word	.LANCHOR13
 4671 00cc 00000000 		.word	.LANCHOR4
 4672 00d0 00000000 		.word	.LANCHOR10
 4673 00d4 00000000 		.word	.LANCHOR1
 4674 00d8 00000000 		.word	.LANCHOR20
 4675              		.cfi_endproc
 4676              	.LFE49:
 4678              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4679              		.align	1
 4680              		.global	xTaskNotifyStateClear
 4681              		.syntax unified
 4682              		.thumb
 4683              		.thumb_func
 4684              		.fpu fpv5-sp-d16
 4686              	xTaskNotifyStateClear:
 4687              	.LFB50:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4688              		.loc 1 4663 0
 4689              		.cfi_startproc
 4690              		@ args = 0, pretend = 0, frame = 0
 4691              		@ frame_needed = 0, uses_anonymous_args = 0
 4692              	.LVL367:
 4693 0000 10B5     		push	{r4, lr}
 4694              	.LCFI47:
 4695              		.cfi_def_cfa_offset 8
 4696              		.cfi_offset 4, -8
 4697              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4698              		.loc 1 4669 0
 4699 0002 0446     		mov	r4, r0
 4700 0004 58B1     		cbz	r0, .L425
 4701              	.LVL368:
 4702              	.L421:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4703              		.loc 1 4671 0 discriminator 4
 4704 0006 FFF7FEFF 		bl	vPortEnterCritical
 4705              	.LVL369:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4706              		.loc 1 4673 0 discriminator 4
 4707 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4708 000e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 181


 4709 0010 022B     		cmp	r3, #2
 4710 0012 07D0     		beq	.L426
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4711              		.loc 1 4680 0
 4712 0014 0024     		movs	r4, #0
 4713              	.LVL370:
 4714              	.L422:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4715              		.loc 1 4683 0
 4716 0016 FFF7FEFF 		bl	vPortExitCritical
 4717              	.LVL371:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4718              		.loc 1 4686 0
 4719 001a 2046     		mov	r0, r4
 4720 001c 10BD     		pop	{r4, pc}
 4721              	.LVL372:
 4722              	.L425:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4723              		.loc 1 4669 0 discriminator 1
 4724 001e 044B     		ldr	r3, .L427
 4725 0020 1C68     		ldr	r4, [r3]
 4726              	.LVL373:
 4727 0022 F0E7     		b	.L421
 4728              	.LVL374:
 4729              	.L426:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4730              		.loc 1 4675 0
 4731 0024 0023     		movs	r3, #0
 4732 0026 84F85030 		strb	r3, [r4, #80]
 4733              	.LVL375:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4734              		.loc 1 4676 0
 4735 002a 0124     		movs	r4, #1
 4736              	.LVL376:
 4737 002c F3E7     		b	.L422
 4738              	.L428:
 4739 002e 00BF     		.align	2
 4740              	.L427:
 4741 0030 00000000 		.word	.LANCHOR10
 4742              		.cfi_endproc
 4743              	.LFE50:
 4745              		.global	pxCurrentTCB
 4746              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4747              		.align	2
 4748              		.set	.LANCHOR10,. + 0
 4751              	pxCurrentTCB:
 4752 0000 00000000 		.space	4
 4753              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4754              		.align	2
 4755              		.set	.LANCHOR2,. + 0
 4758              	pxDelayedTaskList:
 4759 0000 00000000 		.space	4
 4760              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4761              		.align	2
 4762              		.set	.LANCHOR8,. + 0
 4765              	pxOverflowDelayedTaskList:
 4766 0000 00000000 		.space	4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 182


 4767              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4768              		.align	2
 4769              		.set	.LANCHOR4,. + 0
 4772              	pxReadyTasksLists:
 4773 0000 00000000 		.space	140
 4773      00000000 
 4773      00000000 
 4773      00000000 
 4773      00000000 
 4774              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4775              		.align	2
 4776              		.set	.LANCHOR9,. + 0
 4779              	uxCurrentNumberOfTasks:
 4780 0000 00000000 		.space	4
 4781              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4782              		.align	2
 4783              		.set	.LANCHOR15,. + 0
 4786              	uxDeletedTasksWaitingCleanUp:
 4787 0000 00000000 		.space	4
 4788              		.section	.bss.uxPendedTicks,"aw",%nobits
 4789              		.align	2
 4790              		.set	.LANCHOR19,. + 0
 4793              	uxPendedTicks:
 4794 0000 00000000 		.space	4
 4795              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4796              		.align	2
 4797              		.set	.LANCHOR16,. + 0
 4800              	uxSchedulerSuspended:
 4801 0000 00000000 		.space	4
 4802              		.section	.bss.uxTaskNumber,"aw",%nobits
 4803              		.align	2
 4804              		.set	.LANCHOR12,. + 0
 4807              	uxTaskNumber:
 4808 0000 00000000 		.space	4
 4809              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4810              		.align	2
 4811              		.set	.LANCHOR13,. + 0
 4814              	uxTopReadyPriority:
 4815 0000 00000000 		.space	4
 4816              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4817              		.align	2
 4818              		.set	.LANCHOR5,. + 0
 4821              	xDelayedTaskList1:
 4822 0000 00000000 		.space	20
 4822      00000000 
 4822      00000000 
 4822      00000000 
 4822      00000000 
 4823              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4824              		.align	2
 4825              		.set	.LANCHOR6,. + 0
 4828              	xDelayedTaskList2:
 4829 0000 00000000 		.space	20
 4829      00000000 
 4829      00000000 
 4829      00000000 
 4829      00000000 
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 183


 4830              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 4831              		.align	2
 4832              		.set	.LANCHOR17,. + 0
 4835              	xIdleTaskHandle:
 4836 0000 00000000 		.space	4
 4837              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4838              		.align	2
 4839              		.set	.LANCHOR3,. + 0
 4842              	xNextTaskUnblockTime:
 4843 0000 00000000 		.space	4
 4844              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4845              		.align	2
 4846              		.set	.LANCHOR18,. + 0
 4849              	xNumOfOverflows:
 4850 0000 00000000 		.space	4
 4851              		.section	.bss.xPendingReadyList,"aw",%nobits
 4852              		.align	2
 4853              		.set	.LANCHOR1,. + 0
 4856              	xPendingReadyList:
 4857 0000 00000000 		.space	20
 4857      00000000 
 4857      00000000 
 4857      00000000 
 4857      00000000 
 4858              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4859              		.align	2
 4860              		.set	.LANCHOR11,. + 0
 4863              	xSchedulerRunning:
 4864 0000 00000000 		.space	4
 4865              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 4866              		.align	2
 4867              		.set	.LANCHOR0,. + 0
 4870              	xSuspendedTaskList:
 4871 0000 00000000 		.space	20
 4871      00000000 
 4871      00000000 
 4871      00000000 
 4871      00000000 
 4872              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4873              		.align	2
 4874              		.set	.LANCHOR7,. + 0
 4877              	xTasksWaitingTermination:
 4878 0000 00000000 		.space	20
 4878      00000000 
 4878      00000000 
 4878      00000000 
 4878      00000000 
 4879              		.section	.bss.xTickCount,"aw",%nobits
 4880              		.align	2
 4881              		.set	.LANCHOR14,. + 0
 4884              	xTickCount:
 4885 0000 00000000 		.space	4
 4886              		.section	.bss.xYieldPending,"aw",%nobits
 4887              		.align	2
 4888              		.set	.LANCHOR20,. + 0
 4891              	xYieldPending:
 4892 0000 00000000 		.space	4
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 184


 4893              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 4894              		.align	2
 4895              	.LC0:
 4896 0000 49444C45 		.ascii	"IDLE\000"
 4896      00
 4897              		.text
 4898              	.Letext0:
 4899              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 4900              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4901              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4902              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4903              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4904              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4905              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 4906              		.file 10 "Inc/FreeRTOSConfig.h"
 4907              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 4908              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4909              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4910              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 185


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:94     .text.prvTaskIsTaskSuspended:0000003c $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:100    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:106    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:140    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:146    .text.prvDeleteTCB:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:152    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:180    .text.prvInitialiseNewTask:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:186    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:294    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:300    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:367    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:379    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:385    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:476    .text.prvAddNewTaskToReadyList:00000074 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:486    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:492    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:595    .text.prvAddCurrentTaskToDelayedList:00000084 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:606    .text.xTaskCreate:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:613    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:718    .text.vTaskDelete:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:725    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:879    .text.vTaskDelete:000000bc $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:893    .text.uxTaskPriorityGet:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:900    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:939    .text.uxTaskPriorityGet:0000001c $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:944    .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:951    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1016   .text.uxTaskPriorityGetFromISR:00000030 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1021   .text.vTaskPrioritySet:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1028   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1168   .text.vTaskPrioritySet:000000a4 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1175   .text.vTaskResume:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1182   .text.vTaskResume:00000000 vTaskResume
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1270   .text.vTaskResume:00000060 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1277   .text.xTaskResumeFromISR:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1284   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1421   .text.xTaskResumeFromISR:00000098 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1430   .text.vTaskStartScheduler:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1437   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1535   .text.vTaskStartScheduler:0000006c $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2338   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1547   .text.vTaskEndScheduler:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1554   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1594   .text.vTaskEndScheduler:00000024 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1599   .text.vTaskSuspendAll:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1606   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1623   .text.vTaskSuspendAll:0000000c $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1628   .text.xTaskGetTickCount:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1635   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1651   .text.xTaskGetTickCount:00000008 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1656   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1663   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1686   .text.xTaskGetTickCountFromISR:0000000c $d
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 186


C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1691   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1698   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1713   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1718   .text.pcTaskGetName:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1725   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1773   .text.pcTaskGetName:00000028 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1780   .text.xTaskIncrementTick:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1787   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1956   .text.xTaskIncrementTick:000000c0 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1969   .text.xTaskResumeAll:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:1976   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2131   .text.xTaskResumeAll:000000b4 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2143   .text.vTaskDelay:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2150   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2225   .text.vTaskDelay:00000048 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2231   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2237   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2324   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2332   .text.prvIdleTask:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2373   .text.prvIdleTask:00000018 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2378   .text.vTaskSwitchContext:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2385   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2514   .text.vTaskSwitchContext:00000088 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2525   .text.vTaskSuspend:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2532   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2689   .text.vTaskSuspend:000000bc $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2701   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2708   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2763   .text.vTaskPlaceOnEventList:00000030 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2768   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2775   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2867   .text.vTaskPlaceOnUnorderedEventList:0000005c $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2873   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2880   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2985   .text.xTaskRemoveFromEventList:00000078 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:2995   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3002   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3121   .text.xTaskRemoveFromUnorderedEventList:00000080 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3130   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3137   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3179   .text.vTaskSetTimeOutState:00000028 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3187   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3194   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3324   .text.xTaskCheckForTimeOut:00000080 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3331   .text.vTaskMissedYield:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3338   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3354   .text.vTaskMissedYield:00000008 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3359   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3366   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3382   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3387   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3394   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3426   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3432   .text.vTaskPriorityInherit:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3439   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3552   .text.vTaskPriorityInherit:00000094 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3559   .text.xTaskPriorityDisinherit:00000000 $t
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 187


C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3566   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3724   .text.xTaskPriorityDisinherit:000000ac $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3731   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3738   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3761   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3766   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3773   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3799   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3804   .text.ulTaskNotifyTake:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3811   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3907   .text.ulTaskNotifyTake:00000070 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3913   .text.xTaskNotifyWait:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:3920   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4035   .text.xTaskNotifyWait:00000090 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4041   .text.xTaskGenericNotify:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4048   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4116   .text.xTaskGenericNotify:00000042 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4120   .text.xTaskGenericNotify:00000046 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4227   .text.xTaskGenericNotify:000000c0 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4234   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4241   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4330   .text.xTaskGenericNotifyFromISR:00000064 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4334   .text.xTaskGenericNotifyFromISR:00000068 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4480   .text.xTaskGenericNotifyFromISR:00000114 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4490   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4497   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4669   .text.vTaskNotifyGiveFromISR:000000c4 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4679   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4686   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4741   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4751   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4747   .bss.pxCurrentTCB:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4754   .bss.pxDelayedTaskList:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4758   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4761   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4765   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4768   .bss.pxReadyTasksLists:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4772   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4775   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4779   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4782   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4786   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4789   .bss.uxPendedTicks:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4793   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4796   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4800   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4803   .bss.uxTaskNumber:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4807   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4810   .bss.uxTopReadyPriority:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4814   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4817   .bss.xDelayedTaskList1:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4821   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4824   .bss.xDelayedTaskList2:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4828   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4831   .bss.xIdleTaskHandle:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4835   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4838   .bss.xNextTaskUnblockTime:00000000 $d
ARM GAS  C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s 			page 188


C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4842   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4845   .bss.xNumOfOverflows:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4849   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4852   .bss.xPendingReadyList:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4856   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4859   .bss.xSchedulerRunning:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4863   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4866   .bss.xSuspendedTaskList:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4870   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4873   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4877   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4880   .bss.xTickCount:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4884   .bss.xTickCount:00000000 xTickCount
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4887   .bss.xYieldPending:00000000 $d
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4891   .bss.xYieldPending:00000000 xYieldPending
C:\Users\micha\AppData\Local\Temp\cc68Nj4e.s:4894   .rodata.vTaskStartScheduler.str1.4:00000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
